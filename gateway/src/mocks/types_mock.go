// Code generated by MockGen. DO NOT EDIT.
// Source: cs3219-project-ay2223s1-g33/gateway/util (interfaces: Disposable,PipeOutput,PipeInput,ThroughPipe,DisposablePipeInput,DisposableThroughPipe)

// Package mocks is a generated GoMock package.
package mocks

import (
	util "cs3219-project-ay2223s1-g33/gateway/util"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDisposable is a mock of Disposable interface.
type MockDisposable struct {
	ctrl     *gomock.Controller
	recorder *MockDisposableMockRecorder
}

// MockDisposableMockRecorder is the mock recorder for MockDisposable.
type MockDisposableMockRecorder struct {
	mock *MockDisposable
}

// NewMockDisposable creates a new mock instance.
func NewMockDisposable(ctrl *gomock.Controller) *MockDisposable {
	mock := &MockDisposable{ctrl: ctrl}
	mock.recorder = &MockDisposableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisposable) EXPECT() *MockDisposableMockRecorder {
	return m.recorder
}

// Dispose mocks base method.
func (m *MockDisposable) Dispose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispose")
}

// Dispose indicates an expected call of Dispose.
func (mr *MockDisposableMockRecorder) Dispose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispose", reflect.TypeOf((*MockDisposable)(nil).Dispose))
}

// MockPipeOutput is a mock of PipeOutput interface.
type MockPipeOutput struct {
	ctrl     *gomock.Controller
	recorder *MockPipeOutputMockRecorder
}

// MockPipeOutputMockRecorder is the mock recorder for MockPipeOutput.
type MockPipeOutputMockRecorder struct {
	mock *MockPipeOutput
}

// NewMockPipeOutput creates a new mock instance.
func NewMockPipeOutput(ctrl *gomock.Controller) *MockPipeOutput {
	mock := &MockPipeOutput{ctrl: ctrl}
	mock.recorder = &MockPipeOutputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipeOutput) EXPECT() *MockPipeOutputMockRecorder {
	return m.recorder
}

// PipeTo mocks base method.
func (m *MockPipeOutput) PipeTo(arg0 util.PipeInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PipeTo", arg0)
}

// PipeTo indicates an expected call of PipeTo.
func (mr *MockPipeOutputMockRecorder) PipeTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipeTo", reflect.TypeOf((*MockPipeOutput)(nil).PipeTo), arg0)
}

// MockPipeInput is a mock of PipeInput interface.
type MockPipeInput struct {
	ctrl     *gomock.Controller
	recorder *MockPipeInputMockRecorder
}

// MockPipeInputMockRecorder is the mock recorder for MockPipeInput.
type MockPipeInputMockRecorder struct {
	mock *MockPipeInput
}

// NewMockPipeInput creates a new mock instance.
func NewMockPipeInput(ctrl *gomock.Controller) *MockPipeInput {
	mock := &MockPipeInput{ctrl: ctrl}
	mock.recorder = &MockPipeInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPipeInput) EXPECT() *MockPipeInputMockRecorder {
	return m.recorder
}

// Receive mocks base method.
func (m *MockPipeInput) Receive(arg0 *util.HTTPContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockPipeInputMockRecorder) Receive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockPipeInput)(nil).Receive), arg0)
}

// MockThroughPipe is a mock of ThroughPipe interface.
type MockThroughPipe struct {
	ctrl     *gomock.Controller
	recorder *MockThroughPipeMockRecorder
}

// MockThroughPipeMockRecorder is the mock recorder for MockThroughPipe.
type MockThroughPipeMockRecorder struct {
	mock *MockThroughPipe
}

// NewMockThroughPipe creates a new mock instance.
func NewMockThroughPipe(ctrl *gomock.Controller) *MockThroughPipe {
	mock := &MockThroughPipe{ctrl: ctrl}
	mock.recorder = &MockThroughPipeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThroughPipe) EXPECT() *MockThroughPipeMockRecorder {
	return m.recorder
}

// PipeTo mocks base method.
func (m *MockThroughPipe) PipeTo(arg0 util.PipeInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PipeTo", arg0)
}

// PipeTo indicates an expected call of PipeTo.
func (mr *MockThroughPipeMockRecorder) PipeTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipeTo", reflect.TypeOf((*MockThroughPipe)(nil).PipeTo), arg0)
}

// Receive mocks base method.
func (m *MockThroughPipe) Receive(arg0 *util.HTTPContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockThroughPipeMockRecorder) Receive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockThroughPipe)(nil).Receive), arg0)
}

// MockDisposablePipeInput is a mock of DisposablePipeInput interface.
type MockDisposablePipeInput struct {
	ctrl     *gomock.Controller
	recorder *MockDisposablePipeInputMockRecorder
}

// MockDisposablePipeInputMockRecorder is the mock recorder for MockDisposablePipeInput.
type MockDisposablePipeInputMockRecorder struct {
	mock *MockDisposablePipeInput
}

// NewMockDisposablePipeInput creates a new mock instance.
func NewMockDisposablePipeInput(ctrl *gomock.Controller) *MockDisposablePipeInput {
	mock := &MockDisposablePipeInput{ctrl: ctrl}
	mock.recorder = &MockDisposablePipeInputMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisposablePipeInput) EXPECT() *MockDisposablePipeInputMockRecorder {
	return m.recorder
}

// Dispose mocks base method.
func (m *MockDisposablePipeInput) Dispose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispose")
}

// Dispose indicates an expected call of Dispose.
func (mr *MockDisposablePipeInputMockRecorder) Dispose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispose", reflect.TypeOf((*MockDisposablePipeInput)(nil).Dispose))
}

// Receive mocks base method.
func (m *MockDisposablePipeInput) Receive(arg0 *util.HTTPContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockDisposablePipeInputMockRecorder) Receive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockDisposablePipeInput)(nil).Receive), arg0)
}

// MockDisposableThroughPipe is a mock of DisposableThroughPipe interface.
type MockDisposableThroughPipe struct {
	ctrl     *gomock.Controller
	recorder *MockDisposableThroughPipeMockRecorder
}

// MockDisposableThroughPipeMockRecorder is the mock recorder for MockDisposableThroughPipe.
type MockDisposableThroughPipeMockRecorder struct {
	mock *MockDisposableThroughPipe
}

// NewMockDisposableThroughPipe creates a new mock instance.
func NewMockDisposableThroughPipe(ctrl *gomock.Controller) *MockDisposableThroughPipe {
	mock := &MockDisposableThroughPipe{ctrl: ctrl}
	mock.recorder = &MockDisposableThroughPipeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDisposableThroughPipe) EXPECT() *MockDisposableThroughPipeMockRecorder {
	return m.recorder
}

// Dispose mocks base method.
func (m *MockDisposableThroughPipe) Dispose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Dispose")
}

// Dispose indicates an expected call of Dispose.
func (mr *MockDisposableThroughPipeMockRecorder) Dispose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispose", reflect.TypeOf((*MockDisposableThroughPipe)(nil).Dispose))
}

// PipeTo mocks base method.
func (m *MockDisposableThroughPipe) PipeTo(arg0 util.PipeInput) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PipeTo", arg0)
}

// PipeTo indicates an expected call of PipeTo.
func (mr *MockDisposableThroughPipeMockRecorder) PipeTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PipeTo", reflect.TypeOf((*MockDisposableThroughPipe)(nil).PipeTo), arg0)
}

// Receive mocks base method.
func (m *MockDisposableThroughPipe) Receive(arg0 *util.HTTPContext) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Receive", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Receive indicates an expected call of Receive.
func (mr *MockDisposableThroughPipeMockRecorder) Receive(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockDisposableThroughPipe)(nil).Receive), arg0)
}
