// Code generated by MockGen. DO NOT EDIT.
// Source: cs3219-project-ay2223s1-g33/matchmaker/conn (interfaces: RedisMatchmakerClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	common "cs3219-project-ay2223s1-g33/matchmaker/common"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisMatchmakerClient is a mock of RedisMatchmakerClient interface.
type MockRedisMatchmakerClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedisMatchmakerClientMockRecorder
}

// MockRedisMatchmakerClientMockRecorder is the mock recorder for MockRedisMatchmakerClient.
type MockRedisMatchmakerClientMockRecorder struct {
	mock *MockRedisMatchmakerClient
}

// NewMockRedisMatchmakerClient creates a new mock instance.
func NewMockRedisMatchmakerClient(ctrl *gomock.Controller) *MockRedisMatchmakerClient {
	mock := &MockRedisMatchmakerClient{ctrl: ctrl}
	mock.recorder = &MockRedisMatchmakerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisMatchmakerClient) EXPECT() *MockRedisMatchmakerClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRedisMatchmakerClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRedisMatchmakerClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedisMatchmakerClient)(nil).Close))
}

// Connect mocks base method.
func (m *MockRedisMatchmakerClient) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect.
func (mr *MockRedisMatchmakerClientMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRedisMatchmakerClient)(nil).Connect))
}

// DeleteQueueItems mocks base method.
func (m *MockRedisMatchmakerClient) DeleteQueueItems(arg0 []*common.QueueItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQueueItems", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQueueItems indicates an expected call of DeleteQueueItems.
func (mr *MockRedisMatchmakerClientMockRecorder) DeleteQueueItems(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQueueItems", reflect.TypeOf((*MockRedisMatchmakerClient)(nil).DeleteQueueItems), arg0)
}

// PollQueue mocks base method.
func (m *MockRedisMatchmakerClient) PollQueue(arg0 int) ([]*common.QueueItem, []*common.QueueItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PollQueue", arg0)
	ret0, _ := ret[0].([]*common.QueueItem)
	ret1, _ := ret[1].([]*common.QueueItem)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PollQueue indicates an expected call of PollQueue.
func (mr *MockRedisMatchmakerClientMockRecorder) PollQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PollQueue", reflect.TypeOf((*MockRedisMatchmakerClient)(nil).PollQueue), arg0)
}

// UploadFailures mocks base method.
func (m *MockRedisMatchmakerClient) UploadFailures(arg0 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadFailures", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadFailures indicates an expected call of UploadFailures.
func (mr *MockRedisMatchmakerClientMockRecorder) UploadFailures(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadFailures", reflect.TypeOf((*MockRedisMatchmakerClient)(nil).UploadFailures), arg0)
}

// UploadMatch mocks base method.
func (m *MockRedisMatchmakerClient) UploadMatch(arg0, arg1 string, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadMatch", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadMatch indicates an expected call of UploadMatch.
func (mr *MockRedisMatchmakerClientMockRecorder) UploadMatch(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadMatch", reflect.TypeOf((*MockRedisMatchmakerClient)(nil).UploadMatch), arg0, arg1, arg2)
}
