/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "user-bff-service.proto" (package "user_bff_service", syntax proto3)
// tslint:disable
import { RegisterRresponse } from "./user-bff-service";
import { RegisterRequest } from "./user-bff-service";
import { LoginResponse } from "./user-bff-service";
import { LoginRequest } from "./user-bff-service";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service user_bff_service.UserBFFService
 */
export interface IUserBFFService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: Login(user_bff_service.LoginRequest) returns (user_bff_service.LoginResponse);
     */
    login: grpc.handleUnaryCall<LoginRequest, LoginResponse>;
    /**
     * @generated from protobuf rpc: Register(user_bff_service.RegisterRequest) returns (user_bff_service.RegisterRresponse);
     */
    register: grpc.handleUnaryCall<RegisterRequest, RegisterRresponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service user_bff_service.UserBFFService.
 *
 * Usage: Implement the interface IUserBFFService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IUserBFFService = ...
 * server.addService(userBFFServiceDefinition, service);
 * ```
 */
export const userBFFServiceDefinition: grpc.ServiceDefinition<IUserBFFService> = {
    login: {
        path: "/user_bff_service.UserBFFService/Login",
        originalName: "Login",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => LoginResponse.fromBinary(bytes),
        requestDeserialize: bytes => LoginRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(LoginResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(LoginRequest.toBinary(value))
    },
    register: {
        path: "/user_bff_service.UserBFFService/Register",
        originalName: "Register",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => RegisterRresponse.fromBinary(bytes),
        requestDeserialize: bytes => RegisterRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(RegisterRresponse.toBinary(value)),
        requestSerialize: value => Buffer.from(RegisterRequest.toBinary(value))
    }
};
