/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "matching-service.proto" (package "matching_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { QuestionDifficulty } from "./types";
/**
 * @generated from protobuf message matching_service.JoinQueueRequest
 */
export interface JoinQueueRequest {
    /**
     * @generated from protobuf field: repeated common.QuestionDifficulty difficulties = 1;
     */
    difficulties: QuestionDifficulty[];
}
/**
 * @generated from protobuf message matching_service.JoinQueueResponse
 */
export interface JoinQueueResponse {
    /**
     * @generated from protobuf field: string error_message = 1;
     */
    errorMessage: string;
    /**
     * @generated from protobuf field: matching_service.JoinQueueErrorCode error_code = 2;
     */
    errorCode: JoinQueueErrorCode;
}
/**
 * @generated from protobuf message matching_service.CheckQueueStatusRequest
 */
export interface CheckQueueStatusRequest {
}
/**
 * @generated from protobuf message matching_service.CheckQueueStatusResponse
 */
export interface CheckQueueStatusResponse {
    /**
     * @generated from protobuf field: matching_service.QueueStatus queue_status = 1;
     */
    queueStatus: QueueStatus;
    /**
     * @generated from protobuf field: string room_token = 2;
     */
    roomToken: string;
    /**
     * @generated from protobuf field: string error_message = 3;
     */
    errorMessage: string;
    /**
     * @generated from protobuf field: matching_service.CheckQueueStatusErrorCode error_code = 4;
     */
    errorCode: CheckQueueStatusErrorCode;
}
/**
 * @generated from protobuf message matching_service.LeaveQueueRequest
 */
export interface LeaveQueueRequest {
}
/**
 * @generated from protobuf message matching_service.LeaveQueueResponse
 */
export interface LeaveQueueResponse {
    /**
     * @generated from protobuf field: string error_message = 1;
     */
    errorMessage: string;
    /**
     * @generated from protobuf field: matching_service.LeaveQueueErrorCode error_code = 2;
     */
    errorCode: LeaveQueueErrorCode;
}
/**
 * @generated from protobuf enum matching_service.JoinQueueErrorCode
 */
export enum JoinQueueErrorCode {
    /**
     * @generated from protobuf enum value: JOIN_QUEUE_ERROR_NONE = 0;
     */
    JOIN_QUEUE_ERROR_NONE = 0,
    /**
     * @generated from protobuf enum value: JOIN_QUEUE_ALREADY_IN_QUEUE = 1;
     */
    JOIN_QUEUE_ALREADY_IN_QUEUE = 1,
    /**
     * @generated from protobuf enum value: JOIN_QUEUE_BAD_REQUEST = 100;
     */
    JOIN_QUEUE_BAD_REQUEST = 100,
    /**
     * @generated from protobuf enum value: JOIN_QUEUE_INTERNAL_ERROR = 101;
     */
    JOIN_QUEUE_INTERNAL_ERROR = 101
}
/**
 * @generated from protobuf enum matching_service.LeaveQueueErrorCode
 */
export enum LeaveQueueErrorCode {
    /**
     * @generated from protobuf enum value: LEAVE_QUEUE_ERROR_NONE = 0;
     */
    LEAVE_QUEUE_ERROR_NONE = 0,
    /**
     * @generated from protobuf enum value: LEAVE_QUEUE_NOT_IN_QUEUE = 1;
     */
    LEAVE_QUEUE_NOT_IN_QUEUE = 1,
    /**
     * @generated from protobuf enum value: LEAVE_QUEUE_BAD_REQUEST = 100;
     */
    LEAVE_QUEUE_BAD_REQUEST = 100,
    /**
     * @generated from protobuf enum value: LEAVE_QUEUE_INTERNAL_ERROR = 101;
     */
    LEAVE_QUEUE_INTERNAL_ERROR = 101
}
/**
 * @generated from protobuf enum matching_service.CheckQueueStatusErrorCode
 */
export enum CheckQueueStatusErrorCode {
    /**
     * @generated from protobuf enum value: CHECK_QUEUE_STATUS_ERROR_NONE = 0;
     */
    CHECK_QUEUE_STATUS_ERROR_NONE = 0,
    /**
     * @generated from protobuf enum value: CHECK_QUEUE_STATUS_ERROR_NOT_IN_QUEUE = 1;
     */
    CHECK_QUEUE_STATUS_ERROR_NOT_IN_QUEUE = 1,
    /**
     * @generated from protobuf enum value: CHECK_QUEUE_STATUS_BAD_REQUEST = 100;
     */
    CHECK_QUEUE_STATUS_BAD_REQUEST = 100,
    /**
     * @generated from protobuf enum value: CHECK_QUEUE_STATUS_INTERNAL_ERROR = 101;
     */
    CHECK_QUEUE_STATUS_INTERNAL_ERROR = 101
}
/**
 * @generated from protobuf enum matching_service.QueueStatus
 */
export enum QueueStatus {
    /**
     * @generated from protobuf enum value: QUEUE_STATUS_PENDING = 0;
     */
    PENDING = 0,
    /**
     * @generated from protobuf enum value: QUEUE_STATUS_MATCHED = 1;
     */
    MATCHED = 1,
    /**
     * @generated from protobuf enum value: QUEUE_STATUS_EXPIRED = 2;
     */
    EXPIRED = 2,
    /**
     * @generated from protobuf enum value: QUEUE_STATUS_INVALID = 3;
     */
    INVALID = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class JoinQueueRequest$Type extends MessageType<JoinQueueRequest> {
    constructor() {
        super("matching_service.JoinQueueRequest", [
            { no: 1, name: "difficulties", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["common.QuestionDifficulty", QuestionDifficulty, "QUESTION_DIFFICULTY_"] }
        ]);
    }
    create(value?: PartialMessage<JoinQueueRequest>): JoinQueueRequest {
        const message = { difficulties: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinQueueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinQueueRequest): JoinQueueRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated common.QuestionDifficulty difficulties */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.difficulties.push(reader.int32());
                    else
                        message.difficulties.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinQueueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated common.QuestionDifficulty difficulties = 1; */
        if (message.difficulties.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.difficulties.length; i++)
                writer.int32(message.difficulties[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message matching_service.JoinQueueRequest
 */
export const JoinQueueRequest = new JoinQueueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JoinQueueResponse$Type extends MessageType<JoinQueueResponse> {
    constructor() {
        super("matching_service.JoinQueueResponse", [
            { no: 1, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "error_code", kind: "enum", T: () => ["matching_service.JoinQueueErrorCode", JoinQueueErrorCode] }
        ]);
    }
    create(value?: PartialMessage<JoinQueueResponse>): JoinQueueResponse {
        const message = { errorMessage: "", errorCode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<JoinQueueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: JoinQueueResponse): JoinQueueResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error_message */ 1:
                    message.errorMessage = reader.string();
                    break;
                case /* matching_service.JoinQueueErrorCode error_code */ 2:
                    message.errorCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: JoinQueueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error_message = 1; */
        if (message.errorMessage !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.errorMessage);
        /* matching_service.JoinQueueErrorCode error_code = 2; */
        if (message.errorCode !== 0)
            writer.tag(2, WireType.Varint).int32(message.errorCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message matching_service.JoinQueueResponse
 */
export const JoinQueueResponse = new JoinQueueResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckQueueStatusRequest$Type extends MessageType<CheckQueueStatusRequest> {
    constructor() {
        super("matching_service.CheckQueueStatusRequest", []);
    }
    create(value?: PartialMessage<CheckQueueStatusRequest>): CheckQueueStatusRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckQueueStatusRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckQueueStatusRequest): CheckQueueStatusRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CheckQueueStatusRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message matching_service.CheckQueueStatusRequest
 */
export const CheckQueueStatusRequest = new CheckQueueStatusRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckQueueStatusResponse$Type extends MessageType<CheckQueueStatusResponse> {
    constructor() {
        super("matching_service.CheckQueueStatusResponse", [
            { no: 1, name: "queue_status", kind: "enum", T: () => ["matching_service.QueueStatus", QueueStatus, "QUEUE_STATUS_"] },
            { no: 2, name: "room_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "error_code", kind: "enum", T: () => ["matching_service.CheckQueueStatusErrorCode", CheckQueueStatusErrorCode] }
        ]);
    }
    create(value?: PartialMessage<CheckQueueStatusResponse>): CheckQueueStatusResponse {
        const message = { queueStatus: 0, roomToken: "", errorMessage: "", errorCode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckQueueStatusResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckQueueStatusResponse): CheckQueueStatusResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* matching_service.QueueStatus queue_status */ 1:
                    message.queueStatus = reader.int32();
                    break;
                case /* string room_token */ 2:
                    message.roomToken = reader.string();
                    break;
                case /* string error_message */ 3:
                    message.errorMessage = reader.string();
                    break;
                case /* matching_service.CheckQueueStatusErrorCode error_code */ 4:
                    message.errorCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckQueueStatusResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* matching_service.QueueStatus queue_status = 1; */
        if (message.queueStatus !== 0)
            writer.tag(1, WireType.Varint).int32(message.queueStatus);
        /* string room_token = 2; */
        if (message.roomToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.roomToken);
        /* string error_message = 3; */
        if (message.errorMessage !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.errorMessage);
        /* matching_service.CheckQueueStatusErrorCode error_code = 4; */
        if (message.errorCode !== 0)
            writer.tag(4, WireType.Varint).int32(message.errorCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message matching_service.CheckQueueStatusResponse
 */
export const CheckQueueStatusResponse = new CheckQueueStatusResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveQueueRequest$Type extends MessageType<LeaveQueueRequest> {
    constructor() {
        super("matching_service.LeaveQueueRequest", []);
    }
    create(value?: PartialMessage<LeaveQueueRequest>): LeaveQueueRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LeaveQueueRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaveQueueRequest): LeaveQueueRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LeaveQueueRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message matching_service.LeaveQueueRequest
 */
export const LeaveQueueRequest = new LeaveQueueRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LeaveQueueResponse$Type extends MessageType<LeaveQueueResponse> {
    constructor() {
        super("matching_service.LeaveQueueResponse", [
            { no: 1, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "error_code", kind: "enum", T: () => ["matching_service.LeaveQueueErrorCode", LeaveQueueErrorCode] }
        ]);
    }
    create(value?: PartialMessage<LeaveQueueResponse>): LeaveQueueResponse {
        const message = { errorMessage: "", errorCode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LeaveQueueResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LeaveQueueResponse): LeaveQueueResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error_message */ 1:
                    message.errorMessage = reader.string();
                    break;
                case /* matching_service.LeaveQueueErrorCode error_code */ 2:
                    message.errorCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LeaveQueueResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error_message = 1; */
        if (message.errorMessage !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.errorMessage);
        /* matching_service.LeaveQueueErrorCode error_code = 2; */
        if (message.errorCode !== 0)
            writer.tag(2, WireType.Varint).int32(message.errorCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message matching_service.LeaveQueueResponse
 */
export const LeaveQueueResponse = new LeaveQueueResponse$Type();
/**
 * @generated ServiceType for protobuf service matching_service.QueueService
 */
export const QueueService = new ServiceType("matching_service.QueueService", [
    { name: "JoinQueue", options: {}, I: JoinQueueRequest, O: JoinQueueResponse },
    { name: "CheckQueueStatus", options: {}, I: CheckQueueStatusRequest, O: CheckQueueStatusResponse },
    { name: "LeaveQueue", options: {}, I: LeaveQueueRequest, O: LeaveQueueResponse }
]);
