/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "tunnel-service.proto" (package "tunnel_service", syntax proto3)
// tslint:disable
import { TunnelService } from "./tunnel-service";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { TunnelServiceResponse } from "./tunnel-service";
import type { TunnelServiceRequest } from "./tunnel-service";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service tunnel_service.TunnelService
 */
export interface ITunnelServiceClient {
    /**
     * @generated from protobuf rpc: OpenStream(stream tunnel_service.TunnelServiceRequest) returns (stream tunnel_service.TunnelServiceResponse);
     */
    openStream(metadata: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientDuplexStream<TunnelServiceRequest, TunnelServiceResponse>;
    openStream(options?: grpc.CallOptions): grpc.ClientDuplexStream<TunnelServiceRequest, TunnelServiceResponse>;
}
/**
 * @generated from protobuf service tunnel_service.TunnelService
 */
export class TunnelServiceClient extends grpc.Client implements ITunnelServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: OpenStream(stream tunnel_service.TunnelServiceRequest) returns (stream tunnel_service.TunnelServiceResponse);
     */
    openStream(metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientDuplexStream<TunnelServiceRequest, TunnelServiceResponse> {
        const method = TunnelService.methods[0];
        return this.makeBidiStreamRequest<TunnelServiceRequest, TunnelServiceResponse>(`/${TunnelService.typeName}/${method.name}`, (value: TunnelServiceRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): TunnelServiceResponse => method.O.fromBinary(value, this._binaryOptions), (metadata as any), options);
    }
}
