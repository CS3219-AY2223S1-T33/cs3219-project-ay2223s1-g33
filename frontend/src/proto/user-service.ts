/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "user-service.proto" (package "user_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { User } from "./types";
/**
 * @generated from protobuf message user_service.UserCredentials
 */
export interface UserCredentials {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message user_service.LoginRequest
 */
export interface LoginRequest {
    /**
     * @generated from protobuf field: user_service.UserCredentials credentials = 1;
     */
    credentials?: UserCredentials;
}
/**
 * @generated from protobuf message user_service.LoginResponse
 */
export interface LoginResponse {
    /**
     * @generated from protobuf field: common.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: user_service.LoginErrorCode error_code = 2;
     */
    errorCode: LoginErrorCode;
    /**
     * @generated from protobuf field: string error_message = 3;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_service.RegisterRequest
 */
export interface RegisterRequest {
    /**
     * @generated from protobuf field: user_service.UserCredentials credentials = 1;
     */
    credentials?: UserCredentials;
    /**
     * @generated from protobuf field: string nickname = 2;
     */
    nickname: string;
}
/**
 * @generated from protobuf message user_service.RegisterResponse
 */
export interface RegisterResponse {
    /**
     * @generated from protobuf field: user_service.RegisterErrorCode error_code = 1;
     */
    errorCode: RegisterErrorCode;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_service.LogoutRequest
 */
export interface LogoutRequest {
}
/**
 * @generated from protobuf message user_service.LogoutResponse
 */
export interface LogoutResponse {
    /**
     * @generated from protobuf field: user_service.LogoutErrorCode error_code = 1;
     */
    errorCode: LogoutErrorCode;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_service.GetUserProfileRequest
 */
export interface GetUserProfileRequest {
}
/**
 * @generated from protobuf message user_service.GetUserProfileResponse
 */
export interface GetUserProfileResponse {
    /**
     * @generated from protobuf field: common.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_service.ResetPasswordRequest
 */
export interface ResetPasswordRequest {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
}
/**
 * @generated from protobuf message user_service.ResetPasswordResponse
 */
export interface ResetPasswordResponse {
    /**
     * @generated from protobuf field: user_service.ResetPasswordErrorCode error_code = 1;
     */
    errorCode: ResetPasswordErrorCode;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_service.ConsumeResetTokenRequest
 */
export interface ConsumeResetTokenRequest {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
    /**
     * @generated from protobuf field: string new_password = 2;
     */
    newPassword: string;
}
/**
 * @generated from protobuf message user_service.ConsumeResetTokenResponse
 */
export interface ConsumeResetTokenResponse {
    /**
     * @generated from protobuf field: user_service.ConsumeResetTokenErrorCode error_code = 1;
     */
    errorCode: ConsumeResetTokenErrorCode;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_service.ChangeNicknameRequest
 */
export interface ChangeNicknameRequest {
    /**
     * @generated from protobuf field: string new_nickname = 1;
     */
    newNickname: string;
}
/**
 * @generated from protobuf message user_service.ChangeNicknameResponse
 */
export interface ChangeNicknameResponse {
    /**
     * @generated from protobuf field: user_service.ChangeNicknameErrorCode error_code = 1;
     */
    errorCode: ChangeNicknameErrorCode;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_service.ChangePasswordRequest
 */
export interface ChangePasswordRequest {
    /**
     * @generated from protobuf field: string new_password = 1;
     */
    newPassword: string;
}
/**
 * @generated from protobuf message user_service.ChangePasswordResponse
 */
export interface ChangePasswordResponse {
    /**
     * @generated from protobuf field: user_service.ChangePasswordErrorCode error_code = 1;
     */
    errorCode: ChangePasswordErrorCode;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf enum user_service.LoginErrorCode
 */
export enum LoginErrorCode {
    /**
     * @generated from protobuf enum value: LOGIN_ERROR_NONE = 0;
     */
    LOGIN_ERROR_NONE = 0,
    /**
     * @generated from protobuf enum value: LOGIN_ERROR_INVALID_CREDENTIALS = 1;
     */
    LOGIN_ERROR_INVALID_CREDENTIALS = 1,
    /**
     * @generated from protobuf enum value: LOGIN_ERROR_DISABLED_ACCOUNT = 2;
     */
    LOGIN_ERROR_DISABLED_ACCOUNT = 2,
    /**
     * @generated from protobuf enum value: LOGIN_ERROR_BAD_REQUEST = 100;
     */
    LOGIN_ERROR_BAD_REQUEST = 100,
    /**
     * @generated from protobuf enum value: LOGIN_ERROR_INTERNAL_ERROR = 101;
     */
    LOGIN_ERROR_INTERNAL_ERROR = 101
}
/**
 * @generated from protobuf enum user_service.RegisterErrorCode
 */
export enum RegisterErrorCode {
    /**
     * @generated from protobuf enum value: REGISTER_ERROR_NONE = 0;
     */
    REGISTER_ERROR_NONE = 0,
    /**
     * @generated from protobuf enum value: REGISTER_ERROR_USERNAME_EXISTS = 1;
     */
    REGISTER_ERROR_USERNAME_EXISTS = 1,
    /**
     * @generated from protobuf enum value: REGISTER_ERROR_BAD_REQUEST = 100;
     */
    REGISTER_ERROR_BAD_REQUEST = 100,
    /**
     * @generated from protobuf enum value: REGISTER_ERROR_INTERNAL_ERROR = 101;
     */
    REGISTER_ERROR_INTERNAL_ERROR = 101
}
/**
 * @generated from protobuf enum user_service.LogoutErrorCode
 */
export enum LogoutErrorCode {
    /**
     * @generated from protobuf enum value: LOGOUT_ERROR_NONE = 0;
     */
    LOGOUT_ERROR_NONE = 0,
    /**
     * @generated from protobuf enum value: LOGOUT_ERROR_BAD_REQUEST = 100;
     */
    LOGOUT_ERROR_BAD_REQUEST = 100,
    /**
     * @generated from protobuf enum value: LOGOUT_ERROR_INTERNAL_ERROR = 101;
     */
    LOGOUT_ERROR_INTERNAL_ERROR = 101
}
/**
 * @generated from protobuf enum user_service.ResetPasswordErrorCode
 */
export enum ResetPasswordErrorCode {
    /**
     * @generated from protobuf enum value: RESET_PASSWORD_ERROR_NONE = 0;
     */
    RESET_PASSWORD_ERROR_NONE = 0,
    /**
     * @generated from protobuf enum value: RESET_PASSWORD_ERROR_BAD_REQUEST = 100;
     */
    RESET_PASSWORD_ERROR_BAD_REQUEST = 100,
    /**
     * @generated from protobuf enum value: RESET_PASSWORD_ERROR_INTERNAL_ERROR = 101;
     */
    RESET_PASSWORD_ERROR_INTERNAL_ERROR = 101
}
/**
 * @generated from protobuf enum user_service.ConsumeResetTokenErrorCode
 */
export enum ConsumeResetTokenErrorCode {
    /**
     * @generated from protobuf enum value: CONSUME_RESET_TOKEN_ERROR_NONE = 0;
     */
    CONSUME_RESET_TOKEN_ERROR_NONE = 0,
    /**
     * @generated from protobuf enum value: CONSUME_RESET_TOKEN_ERROR_BAD_REQUEST = 100;
     */
    CONSUME_RESET_TOKEN_ERROR_BAD_REQUEST = 100,
    /**
     * @generated from protobuf enum value: CONSUME_RESET_TOKEN_ERROR_INTERNAL_ERROR = 101;
     */
    CONSUME_RESET_TOKEN_ERROR_INTERNAL_ERROR = 101
}
/**
 * @generated from protobuf enum user_service.ChangeNicknameErrorCode
 */
export enum ChangeNicknameErrorCode {
    /**
     * @generated from protobuf enum value: CHANGE_NICKNAME_ERROR_NONE = 0;
     */
    CHANGE_NICKNAME_ERROR_NONE = 0,
    /**
     * @generated from protobuf enum value: CHANGE_NICKNAME_ERROR_BAD_REQUEST = 100;
     */
    CHANGE_NICKNAME_ERROR_BAD_REQUEST = 100,
    /**
     * @generated from protobuf enum value: CHANGE_NICKNAME_ERROR_INTERNAL_ERROR = 101;
     */
    CHANGE_NICKNAME_ERROR_INTERNAL_ERROR = 101
}
/**
 * @generated from protobuf enum user_service.ChangePasswordErrorCode
 */
export enum ChangePasswordErrorCode {
    /**
     * @generated from protobuf enum value: CHANGE_PASSWORD_ERROR_NONE = 0;
     */
    CHANGE_PASSWORD_ERROR_NONE = 0,
    /**
     * @generated from protobuf enum value: CHANGE_PASSWORD_ERROR_BAD_REQUEST = 100;
     */
    CHANGE_PASSWORD_ERROR_BAD_REQUEST = 100,
    /**
     * @generated from protobuf enum value: CHANGE_PASSWORD_ERROR_INTERNAL_ERROR = 101;
     */
    CHANGE_PASSWORD_ERROR_INTERNAL_ERROR = 101
}
// @generated message type with reflection information, may provide speed optimized methods
class UserCredentials$Type extends MessageType<UserCredentials> {
    constructor() {
        super("user_service.UserCredentials", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserCredentials>): UserCredentials {
        const message = { username: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserCredentials): UserCredentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.UserCredentials
 */
export const UserCredentials = new UserCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginRequest$Type extends MessageType<LoginRequest> {
    constructor() {
        super("user_service.LoginRequest", [
            { no: 1, name: "credentials", kind: "message", T: () => UserCredentials }
        ]);
    }
    create(value?: PartialMessage<LoginRequest>): LoginRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginRequest): LoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user_service.UserCredentials credentials */ 1:
                    message.credentials = UserCredentials.internalBinaryRead(reader, reader.uint32(), options, message.credentials);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user_service.UserCredentials credentials = 1; */
        if (message.credentials)
            UserCredentials.internalBinaryWrite(message.credentials, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.LoginRequest
 */
export const LoginRequest = new LoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginResponse$Type extends MessageType<LoginResponse> {
    constructor() {
        super("user_service.LoginResponse", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "error_code", kind: "enum", T: () => ["user_service.LoginErrorCode", LoginErrorCode] },
            { no: 3, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginResponse>): LoginResponse {
        const message = { errorCode: 0, errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginResponse): LoginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* user_service.LoginErrorCode error_code */ 2:
                    message.errorCode = reader.int32();
                    break;
                case /* string error_message */ 3:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* user_service.LoginErrorCode error_code = 2; */
        if (message.errorCode !== 0)
            writer.tag(2, WireType.Varint).int32(message.errorCode);
        /* string error_message = 3; */
        if (message.errorMessage !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.LoginResponse
 */
export const LoginResponse = new LoginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterRequest$Type extends MessageType<RegisterRequest> {
    constructor() {
        super("user_service.RegisterRequest", [
            { no: 1, name: "credentials", kind: "message", T: () => UserCredentials },
            { no: 2, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterRequest>): RegisterRequest {
        const message = { nickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegisterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterRequest): RegisterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user_service.UserCredentials credentials */ 1:
                    message.credentials = UserCredentials.internalBinaryRead(reader, reader.uint32(), options, message.credentials);
                    break;
                case /* string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user_service.UserCredentials credentials = 1; */
        if (message.credentials)
            UserCredentials.internalBinaryWrite(message.credentials, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string nickname = 2; */
        if (message.nickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.RegisterRequest
 */
export const RegisterRequest = new RegisterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterResponse$Type extends MessageType<RegisterResponse> {
    constructor() {
        super("user_service.RegisterResponse", [
            { no: 1, name: "error_code", kind: "enum", T: () => ["user_service.RegisterErrorCode", RegisterErrorCode] },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterResponse>): RegisterResponse {
        const message = { errorCode: 0, errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegisterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterResponse): RegisterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user_service.RegisterErrorCode error_code */ 1:
                    message.errorCode = reader.int32();
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user_service.RegisterErrorCode error_code = 1; */
        if (message.errorCode !== 0)
            writer.tag(1, WireType.Varint).int32(message.errorCode);
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.RegisterResponse
 */
export const RegisterResponse = new RegisterResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutRequest$Type extends MessageType<LogoutRequest> {
    constructor() {
        super("user_service.LogoutRequest", []);
    }
    create(value?: PartialMessage<LogoutRequest>): LogoutRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LogoutRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutRequest): LogoutRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LogoutRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.LogoutRequest
 */
export const LogoutRequest = new LogoutRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LogoutResponse$Type extends MessageType<LogoutResponse> {
    constructor() {
        super("user_service.LogoutResponse", [
            { no: 1, name: "error_code", kind: "enum", T: () => ["user_service.LogoutErrorCode", LogoutErrorCode] },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LogoutResponse>): LogoutResponse {
        const message = { errorCode: 0, errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LogoutResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LogoutResponse): LogoutResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user_service.LogoutErrorCode error_code */ 1:
                    message.errorCode = reader.int32();
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LogoutResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user_service.LogoutErrorCode error_code = 1; */
        if (message.errorCode !== 0)
            writer.tag(1, WireType.Varint).int32(message.errorCode);
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.LogoutResponse
 */
export const LogoutResponse = new LogoutResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserProfileRequest$Type extends MessageType<GetUserProfileRequest> {
    constructor() {
        super("user_service.GetUserProfileRequest", []);
    }
    create(value?: PartialMessage<GetUserProfileRequest>): GetUserProfileRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUserProfileRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserProfileRequest): GetUserProfileRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetUserProfileRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.GetUserProfileRequest
 */
export const GetUserProfileRequest = new GetUserProfileRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserProfileResponse$Type extends MessageType<GetUserProfileResponse> {
    constructor() {
        super("user_service.GetUserProfileResponse", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserProfileResponse>): GetUserProfileResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUserProfileResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserProfileResponse): GetUserProfileResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserProfileResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.GetUserProfileResponse
 */
export const GetUserProfileResponse = new GetUserProfileResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetPasswordRequest$Type extends MessageType<ResetPasswordRequest> {
    constructor() {
        super("user_service.ResetPasswordRequest", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResetPasswordRequest>): ResetPasswordRequest {
        const message = { username: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResetPasswordRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetPasswordRequest): ResetPasswordRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetPasswordRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.ResetPasswordRequest
 */
export const ResetPasswordRequest = new ResetPasswordRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetPasswordResponse$Type extends MessageType<ResetPasswordResponse> {
    constructor() {
        super("user_service.ResetPasswordResponse", [
            { no: 1, name: "error_code", kind: "enum", T: () => ["user_service.ResetPasswordErrorCode", ResetPasswordErrorCode] },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ResetPasswordResponse>): ResetPasswordResponse {
        const message = { errorCode: 0, errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResetPasswordResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetPasswordResponse): ResetPasswordResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user_service.ResetPasswordErrorCode error_code */ 1:
                    message.errorCode = reader.int32();
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetPasswordResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user_service.ResetPasswordErrorCode error_code = 1; */
        if (message.errorCode !== 0)
            writer.tag(1, WireType.Varint).int32(message.errorCode);
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.ResetPasswordResponse
 */
export const ResetPasswordResponse = new ResetPasswordResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConsumeResetTokenRequest$Type extends MessageType<ConsumeResetTokenRequest> {
    constructor() {
        super("user_service.ConsumeResetTokenRequest", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "new_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConsumeResetTokenRequest>): ConsumeResetTokenRequest {
        const message = { token: "", newPassword: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConsumeResetTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConsumeResetTokenRequest): ConsumeResetTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                case /* string new_password */ 2:
                    message.newPassword = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConsumeResetTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* string new_password = 2; */
        if (message.newPassword !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.newPassword);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.ConsumeResetTokenRequest
 */
export const ConsumeResetTokenRequest = new ConsumeResetTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ConsumeResetTokenResponse$Type extends MessageType<ConsumeResetTokenResponse> {
    constructor() {
        super("user_service.ConsumeResetTokenResponse", [
            { no: 1, name: "error_code", kind: "enum", T: () => ["user_service.ConsumeResetTokenErrorCode", ConsumeResetTokenErrorCode] },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ConsumeResetTokenResponse>): ConsumeResetTokenResponse {
        const message = { errorCode: 0, errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ConsumeResetTokenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ConsumeResetTokenResponse): ConsumeResetTokenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user_service.ConsumeResetTokenErrorCode error_code */ 1:
                    message.errorCode = reader.int32();
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ConsumeResetTokenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user_service.ConsumeResetTokenErrorCode error_code = 1; */
        if (message.errorCode !== 0)
            writer.tag(1, WireType.Varint).int32(message.errorCode);
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.ConsumeResetTokenResponse
 */
export const ConsumeResetTokenResponse = new ConsumeResetTokenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeNicknameRequest$Type extends MessageType<ChangeNicknameRequest> {
    constructor() {
        super("user_service.ChangeNicknameRequest", [
            { no: 1, name: "new_nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeNicknameRequest>): ChangeNicknameRequest {
        const message = { newNickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeNicknameRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeNicknameRequest): ChangeNicknameRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string new_nickname */ 1:
                    message.newNickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeNicknameRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string new_nickname = 1; */
        if (message.newNickname !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.newNickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.ChangeNicknameRequest
 */
export const ChangeNicknameRequest = new ChangeNicknameRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeNicknameResponse$Type extends MessageType<ChangeNicknameResponse> {
    constructor() {
        super("user_service.ChangeNicknameResponse", [
            { no: 1, name: "error_code", kind: "enum", T: () => ["user_service.ChangeNicknameErrorCode", ChangeNicknameErrorCode] },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeNicknameResponse>): ChangeNicknameResponse {
        const message = { errorCode: 0, errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeNicknameResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeNicknameResponse): ChangeNicknameResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user_service.ChangeNicknameErrorCode error_code */ 1:
                    message.errorCode = reader.int32();
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeNicknameResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user_service.ChangeNicknameErrorCode error_code = 1; */
        if (message.errorCode !== 0)
            writer.tag(1, WireType.Varint).int32(message.errorCode);
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.ChangeNicknameResponse
 */
export const ChangeNicknameResponse = new ChangeNicknameResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePasswordRequest$Type extends MessageType<ChangePasswordRequest> {
    constructor() {
        super("user_service.ChangePasswordRequest", [
            { no: 1, name: "new_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangePasswordRequest>): ChangePasswordRequest {
        const message = { newPassword: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangePasswordRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangePasswordRequest): ChangePasswordRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string new_password */ 1:
                    message.newPassword = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangePasswordRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string new_password = 1; */
        if (message.newPassword !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.newPassword);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.ChangePasswordRequest
 */
export const ChangePasswordRequest = new ChangePasswordRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangePasswordResponse$Type extends MessageType<ChangePasswordResponse> {
    constructor() {
        super("user_service.ChangePasswordResponse", [
            { no: 1, name: "error_code", kind: "enum", T: () => ["user_service.ChangePasswordErrorCode", ChangePasswordErrorCode] },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ChangePasswordResponse>): ChangePasswordResponse {
        const message = { errorCode: 0, errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangePasswordResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangePasswordResponse): ChangePasswordResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user_service.ChangePasswordErrorCode error_code */ 1:
                    message.errorCode = reader.int32();
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangePasswordResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user_service.ChangePasswordErrorCode error_code = 1; */
        if (message.errorCode !== 0)
            writer.tag(1, WireType.Varint).int32(message.errorCode);
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_service.ChangePasswordResponse
 */
export const ChangePasswordResponse = new ChangePasswordResponse$Type();
/**
 * @generated ServiceType for protobuf service user_service.UserService
 */
export const UserService = new ServiceType("user_service.UserService", [
    { name: "Login", options: {}, I: LoginRequest, O: LoginResponse },
    { name: "Register", options: {}, I: RegisterRequest, O: RegisterResponse },
    { name: "Logout", options: {}, I: LogoutRequest, O: LogoutResponse },
    { name: "GetUserProfile", options: {}, I: GetUserProfileRequest, O: GetUserProfileResponse },
    { name: "ResetPassword", options: {}, I: ResetPasswordRequest, O: ResetPasswordResponse },
    { name: "ConsumeResetToken", options: {}, I: ConsumeResetTokenRequest, O: ConsumeResetTokenResponse },
    { name: "ChangeNickname", options: {}, I: ChangeNicknameRequest, O: ChangeNicknameResponse },
    { name: "ChangePassword", options: {}, I: ChangePasswordRequest, O: ChangePasswordResponse }
]);
