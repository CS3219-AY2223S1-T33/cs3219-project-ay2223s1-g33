/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "user-crud-service.proto" (package "user_crud_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PasswordResetToken } from "./types";
import { PasswordUser } from "./types";
import { User } from "./types";
/**
 * @generated from protobuf message user_crud_service.GetUserRequest
 */
export interface GetUserRequest {
    /**
     * @generated from protobuf field: common.User user = 1;
     */
    user?: User;
}
/**
 * @generated from protobuf message user_crud_service.GetUserResponse
 */
export interface GetUserResponse {
    /**
     * @generated from protobuf field: common.PasswordUser user = 1;
     */
    user?: PasswordUser;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_crud_service.CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * @generated from protobuf field: common.PasswordUser user = 1;
     */
    user?: PasswordUser;
}
/**
 * @generated from protobuf message user_crud_service.CreateUserResponse
 */
export interface CreateUserResponse {
    /**
     * @generated from protobuf field: common.PasswordUser user = 1;
     */
    user?: PasswordUser;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_crud_service.EditUserRequest
 */
export interface EditUserRequest {
    /**
     * @generated from protobuf field: common.PasswordUser user = 1;
     */
    user?: PasswordUser;
}
/**
 * @generated from protobuf message user_crud_service.EditUserResponse
 */
export interface EditUserResponse {
    /**
     * @generated from protobuf field: common.PasswordUser user = 1;
     */
    user?: PasswordUser;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_crud_service.DeleteUserRequest
 */
export interface DeleteUserRequest {
    /**
     * @generated from protobuf field: uint64 user_id = 1;
     */
    userId: number;
}
/**
 * @generated from protobuf message user_crud_service.DeleteUserResponse
 */
export interface DeleteUserResponse {
    /**
     * @generated from protobuf field: string error_message = 1;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_crud_service.GetResetTokensRequest
 */
export interface GetResetTokensRequest {
    /**
     * @generated from protobuf field: string token_string = 1;
     */
    tokenString: string;
    /**
     * @generated from protobuf field: string username = 2;
     */
    username: string;
}
/**
 * @generated from protobuf message user_crud_service.GetResetTokensResponse
 */
export interface GetResetTokensResponse {
    /**
     * @generated from protobuf field: repeated common.PasswordResetToken tokens = 1;
     */
    tokens: PasswordResetToken[];
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_crud_service.CreateResetTokenRequest
 */
export interface CreateResetTokenRequest {
    /**
     * @generated from protobuf field: common.PasswordResetToken token = 1;
     */
    token?: PasswordResetToken;
}
/**
 * @generated from protobuf message user_crud_service.CreateResetTokenResponse
 */
export interface CreateResetTokenResponse {
    /**
     * @generated from protobuf field: common.PasswordResetToken token = 1;
     */
    token?: PasswordResetToken;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_crud_service.DeleteResetTokenRequest
 */
export interface DeleteResetTokenRequest {
    /**
     * @generated from protobuf field: string token_string = 1;
     */
    tokenString: string;
}
/**
 * @generated from protobuf message user_crud_service.DeleteResetTokenResponse
 */
export interface DeleteResetTokenResponse {
    /**
     * @generated from protobuf field: string error_message = 1;
     */
    errorMessage: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetUserRequest$Type extends MessageType<GetUserRequest> {
    constructor() {
        super("user_crud_service.GetUserRequest", [
            { no: 1, name: "user", kind: "message", T: () => User }
        ]);
    }
    create(value?: PartialMessage<GetUserRequest>): GetUserRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserRequest): GetUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.GetUserRequest
 */
export const GetUserRequest = new GetUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUserResponse$Type extends MessageType<GetUserResponse> {
    constructor() {
        super("user_crud_service.GetUserResponse", [
            { no: 1, name: "user", kind: "message", T: () => PasswordUser },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetUserResponse>): GetUserResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUserResponse): GetUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.PasswordUser user */ 1:
                    message.user = PasswordUser.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.PasswordUser user = 1; */
        if (message.user)
            PasswordUser.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.GetUserResponse
 */
export const GetUserResponse = new GetUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateUserRequest$Type extends MessageType<CreateUserRequest> {
    constructor() {
        super("user_crud_service.CreateUserRequest", [
            { no: 1, name: "user", kind: "message", T: () => PasswordUser }
        ]);
    }
    create(value?: PartialMessage<CreateUserRequest>): CreateUserRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateUserRequest): CreateUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.PasswordUser user */ 1:
                    message.user = PasswordUser.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.PasswordUser user = 1; */
        if (message.user)
            PasswordUser.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.CreateUserRequest
 */
export const CreateUserRequest = new CreateUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateUserResponse$Type extends MessageType<CreateUserResponse> {
    constructor() {
        super("user_crud_service.CreateUserResponse", [
            { no: 1, name: "user", kind: "message", T: () => PasswordUser },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateUserResponse>): CreateUserResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateUserResponse): CreateUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.PasswordUser user */ 1:
                    message.user = PasswordUser.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.PasswordUser user = 1; */
        if (message.user)
            PasswordUser.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.CreateUserResponse
 */
export const CreateUserResponse = new CreateUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditUserRequest$Type extends MessageType<EditUserRequest> {
    constructor() {
        super("user_crud_service.EditUserRequest", [
            { no: 1, name: "user", kind: "message", T: () => PasswordUser }
        ]);
    }
    create(value?: PartialMessage<EditUserRequest>): EditUserRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EditUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditUserRequest): EditUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.PasswordUser user */ 1:
                    message.user = PasswordUser.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.PasswordUser user = 1; */
        if (message.user)
            PasswordUser.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.EditUserRequest
 */
export const EditUserRequest = new EditUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditUserResponse$Type extends MessageType<EditUserResponse> {
    constructor() {
        super("user_crud_service.EditUserResponse", [
            { no: 1, name: "user", kind: "message", T: () => PasswordUser },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EditUserResponse>): EditUserResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EditUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditUserResponse): EditUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.PasswordUser user */ 1:
                    message.user = PasswordUser.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.PasswordUser user = 1; */
        if (message.user)
            PasswordUser.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.EditUserResponse
 */
export const EditUserResponse = new EditUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserRequest$Type extends MessageType<DeleteUserRequest> {
    constructor() {
        super("user_crud_service.DeleteUserRequest", [
            { no: 1, name: "user_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteUserRequest>): DeleteUserRequest {
        const message = { userId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteUserRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserRequest): DeleteUserRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 user_id */ 1:
                    message.userId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 user_id = 1; */
        if (message.userId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.userId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.DeleteUserRequest
 */
export const DeleteUserRequest = new DeleteUserRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteUserResponse$Type extends MessageType<DeleteUserResponse> {
    constructor() {
        super("user_crud_service.DeleteUserResponse", [
            { no: 1, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteUserResponse>): DeleteUserResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteUserResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteUserResponse): DeleteUserResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error_message */ 1:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteUserResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error_message = 1; */
        if (message.errorMessage !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.DeleteUserResponse
 */
export const DeleteUserResponse = new DeleteUserResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetResetTokensRequest$Type extends MessageType<GetResetTokensRequest> {
    constructor() {
        super("user_crud_service.GetResetTokensRequest", [
            { no: 1, name: "token_string", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetResetTokensRequest>): GetResetTokensRequest {
        const message = { tokenString: "", username: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetResetTokensRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetResetTokensRequest): GetResetTokensRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token_string */ 1:
                    message.tokenString = reader.string();
                    break;
                case /* string username */ 2:
                    message.username = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetResetTokensRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token_string = 1; */
        if (message.tokenString !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tokenString);
        /* string username = 2; */
        if (message.username !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.username);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.GetResetTokensRequest
 */
export const GetResetTokensRequest = new GetResetTokensRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetResetTokensResponse$Type extends MessageType<GetResetTokensResponse> {
    constructor() {
        super("user_crud_service.GetResetTokensResponse", [
            { no: 1, name: "tokens", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => PasswordResetToken },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetResetTokensResponse>): GetResetTokensResponse {
        const message = { tokens: [], errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetResetTokensResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetResetTokensResponse): GetResetTokensResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated common.PasswordResetToken tokens */ 1:
                    message.tokens.push(PasswordResetToken.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetResetTokensResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated common.PasswordResetToken tokens = 1; */
        for (let i = 0; i < message.tokens.length; i++)
            PasswordResetToken.internalBinaryWrite(message.tokens[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.GetResetTokensResponse
 */
export const GetResetTokensResponse = new GetResetTokensResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateResetTokenRequest$Type extends MessageType<CreateResetTokenRequest> {
    constructor() {
        super("user_crud_service.CreateResetTokenRequest", [
            { no: 1, name: "token", kind: "message", T: () => PasswordResetToken }
        ]);
    }
    create(value?: PartialMessage<CreateResetTokenRequest>): CreateResetTokenRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateResetTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateResetTokenRequest): CreateResetTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.PasswordResetToken token */ 1:
                    message.token = PasswordResetToken.internalBinaryRead(reader, reader.uint32(), options, message.token);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateResetTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.PasswordResetToken token = 1; */
        if (message.token)
            PasswordResetToken.internalBinaryWrite(message.token, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.CreateResetTokenRequest
 */
export const CreateResetTokenRequest = new CreateResetTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateResetTokenResponse$Type extends MessageType<CreateResetTokenResponse> {
    constructor() {
        super("user_crud_service.CreateResetTokenResponse", [
            { no: 1, name: "token", kind: "message", T: () => PasswordResetToken },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateResetTokenResponse>): CreateResetTokenResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateResetTokenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateResetTokenResponse): CreateResetTokenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.PasswordResetToken token */ 1:
                    message.token = PasswordResetToken.internalBinaryRead(reader, reader.uint32(), options, message.token);
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateResetTokenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.PasswordResetToken token = 1; */
        if (message.token)
            PasswordResetToken.internalBinaryWrite(message.token, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.CreateResetTokenResponse
 */
export const CreateResetTokenResponse = new CreateResetTokenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteResetTokenRequest$Type extends MessageType<DeleteResetTokenRequest> {
    constructor() {
        super("user_crud_service.DeleteResetTokenRequest", [
            { no: 1, name: "token_string", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteResetTokenRequest>): DeleteResetTokenRequest {
        const message = { tokenString: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteResetTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteResetTokenRequest): DeleteResetTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token_string */ 1:
                    message.tokenString = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteResetTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token_string = 1; */
        if (message.tokenString !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.tokenString);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.DeleteResetTokenRequest
 */
export const DeleteResetTokenRequest = new DeleteResetTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteResetTokenResponse$Type extends MessageType<DeleteResetTokenResponse> {
    constructor() {
        super("user_crud_service.DeleteResetTokenResponse", [
            { no: 1, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteResetTokenResponse>): DeleteResetTokenResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteResetTokenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteResetTokenResponse): DeleteResetTokenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error_message */ 1:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteResetTokenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error_message = 1; */
        if (message.errorMessage !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_crud_service.DeleteResetTokenResponse
 */
export const DeleteResetTokenResponse = new DeleteResetTokenResponse$Type();
/**
 * @generated ServiceType for protobuf service user_crud_service.UserCrudService
 */
export const UserCrudService = new ServiceType("user_crud_service.UserCrudService", [
    { name: "GetUser", options: {}, I: GetUserRequest, O: GetUserResponse },
    { name: "CreateUser", options: {}, I: CreateUserRequest, O: CreateUserResponse },
    { name: "EditUser", options: {}, I: EditUserRequest, O: EditUserResponse },
    { name: "DeleteUser", options: {}, I: DeleteUserRequest, O: DeleteUserResponse },
    { name: "GetResetTokens", options: {}, I: GetResetTokensRequest, O: GetResetTokensResponse },
    { name: "CreateResetToken", options: {}, I: CreateResetTokenRequest, O: CreateResetTokenResponse },
    { name: "DeleteResetToken", options: {}, I: DeleteResetTokenRequest, O: DeleteResetTokenResponse }
]);
