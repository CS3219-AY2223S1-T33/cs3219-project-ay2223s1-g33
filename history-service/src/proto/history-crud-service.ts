/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "history-crud-service.proto" (package "history_crud_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { HistoryAttempt } from "./types";
/**
 * @generated from protobuf message history_crud_service.GetAttemptRequest
 */
export interface GetAttemptRequest {
    /**
     * @generated from protobuf field: uint64 attempt_id = 1;
     */
    attemptId: number;
}
/**
 * @generated from protobuf message history_crud_service.GetAttemptResponse
 */
export interface GetAttemptResponse {
    /**
     * @generated from protobuf field: common.HistoryAttempt attempts = 1;
     */
    attempts?: HistoryAttempt;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message history_crud_service.GetAttemptsRequest
 */
export interface GetAttemptsRequest {
    /**
     * @generated from protobuf field: int32 limit = 1;
     */
    limit: number;
    /**
     * @generated from protobuf field: int32 offset = 2;
     */
    offset: number;
    /**
     * @generated from protobuf field: uint64 user_id = 3;
     */
    userId: number;
    /**
     * @generated from protobuf field: string username = 4;
     */
    username: string;
    /**
     * @generated from protobuf field: uint64 question_id = 5;
     */
    questionId: number;
}
/**
 * @generated from protobuf message history_crud_service.GetAttemptsResponse
 */
export interface GetAttemptsResponse {
    /**
     * @generated from protobuf field: repeated common.HistoryAttempt attempts = 1;
     */
    attempts: HistoryAttempt[];
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message history_crud_service.CreateAttemptRequest
 */
export interface CreateAttemptRequest {
    /**
     * @generated from protobuf field: common.HistoryAttempt attempt = 1;
     */
    attempt?: HistoryAttempt;
}
/**
 * @generated from protobuf message history_crud_service.CreateAttemptResponse
 */
export interface CreateAttemptResponse {
    /**
     * @generated from protobuf field: common.HistoryAttempt attempt = 1;
     */
    attempt?: HistoryAttempt;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message history_crud_service.EditAttemptRequest
 */
export interface EditAttemptRequest {
    /**
     * @generated from protobuf field: common.HistoryAttempt attempt = 1;
     */
    attempt?: HistoryAttempt;
}
/**
 * @generated from protobuf message history_crud_service.EditAttemptResponse
 */
export interface EditAttemptResponse {
    /**
     * @generated from protobuf field: common.HistoryAttempt attempt = 1;
     */
    attempt?: HistoryAttempt;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message history_crud_service.DeleteAttemptRequest
 */
export interface DeleteAttemptRequest {
    /**
     * @generated from protobuf field: uint64 attempt_id = 1;
     */
    attemptId: number;
}
/**
 * @generated from protobuf message history_crud_service.DeleteAttemptResponse
 */
export interface DeleteAttemptResponse {
    /**
     * @generated from protobuf field: string error_message = 1;
     */
    errorMessage: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetAttemptRequest$Type extends MessageType<GetAttemptRequest> {
    constructor() {
        super("history_crud_service.GetAttemptRequest", [
            { no: 1, name: "attempt_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetAttemptRequest>): GetAttemptRequest {
        const message = { attemptId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAttemptRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAttemptRequest): GetAttemptRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 attempt_id */ 1:
                    message.attemptId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAttemptRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 attempt_id = 1; */
        if (message.attemptId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.attemptId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message history_crud_service.GetAttemptRequest
 */
export const GetAttemptRequest = new GetAttemptRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAttemptResponse$Type extends MessageType<GetAttemptResponse> {
    constructor() {
        super("history_crud_service.GetAttemptResponse", [
            { no: 1, name: "attempts", kind: "message", T: () => HistoryAttempt },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAttemptResponse>): GetAttemptResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAttemptResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAttemptResponse): GetAttemptResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.HistoryAttempt attempts */ 1:
                    message.attempts = HistoryAttempt.internalBinaryRead(reader, reader.uint32(), options, message.attempts);
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAttemptResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.HistoryAttempt attempts = 1; */
        if (message.attempts)
            HistoryAttempt.internalBinaryWrite(message.attempts, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message history_crud_service.GetAttemptResponse
 */
export const GetAttemptResponse = new GetAttemptResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAttemptsRequest$Type extends MessageType<GetAttemptsRequest> {
    constructor() {
        super("history_crud_service.GetAttemptsRequest", [
            { no: 1, name: "limit", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "offset", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "user_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ },
            { no: 4, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "question_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<GetAttemptsRequest>): GetAttemptsRequest {
        const message = { limit: 0, offset: 0, userId: 0, username: "", questionId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAttemptsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAttemptsRequest): GetAttemptsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 limit */ 1:
                    message.limit = reader.int32();
                    break;
                case /* int32 offset */ 2:
                    message.offset = reader.int32();
                    break;
                case /* uint64 user_id */ 3:
                    message.userId = reader.uint64().toNumber();
                    break;
                case /* string username */ 4:
                    message.username = reader.string();
                    break;
                case /* uint64 question_id */ 5:
                    message.questionId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAttemptsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 limit = 1; */
        if (message.limit !== 0)
            writer.tag(1, WireType.Varint).int32(message.limit);
        /* int32 offset = 2; */
        if (message.offset !== 0)
            writer.tag(2, WireType.Varint).int32(message.offset);
        /* uint64 user_id = 3; */
        if (message.userId !== 0)
            writer.tag(3, WireType.Varint).uint64(message.userId);
        /* string username = 4; */
        if (message.username !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.username);
        /* uint64 question_id = 5; */
        if (message.questionId !== 0)
            writer.tag(5, WireType.Varint).uint64(message.questionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message history_crud_service.GetAttemptsRequest
 */
export const GetAttemptsRequest = new GetAttemptsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAttemptsResponse$Type extends MessageType<GetAttemptsResponse> {
    constructor() {
        super("history_crud_service.GetAttemptsResponse", [
            { no: 1, name: "attempts", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HistoryAttempt },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetAttemptsResponse>): GetAttemptsResponse {
        const message = { attempts: [], errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAttemptsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAttemptsResponse): GetAttemptsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated common.HistoryAttempt attempts */ 1:
                    message.attempts.push(HistoryAttempt.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAttemptsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated common.HistoryAttempt attempts = 1; */
        for (let i = 0; i < message.attempts.length; i++)
            HistoryAttempt.internalBinaryWrite(message.attempts[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message history_crud_service.GetAttemptsResponse
 */
export const GetAttemptsResponse = new GetAttemptsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAttemptRequest$Type extends MessageType<CreateAttemptRequest> {
    constructor() {
        super("history_crud_service.CreateAttemptRequest", [
            { no: 1, name: "attempt", kind: "message", T: () => HistoryAttempt }
        ]);
    }
    create(value?: PartialMessage<CreateAttemptRequest>): CreateAttemptRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateAttemptRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAttemptRequest): CreateAttemptRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.HistoryAttempt attempt */ 1:
                    message.attempt = HistoryAttempt.internalBinaryRead(reader, reader.uint32(), options, message.attempt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAttemptRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.HistoryAttempt attempt = 1; */
        if (message.attempt)
            HistoryAttempt.internalBinaryWrite(message.attempt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message history_crud_service.CreateAttemptRequest
 */
export const CreateAttemptRequest = new CreateAttemptRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateAttemptResponse$Type extends MessageType<CreateAttemptResponse> {
    constructor() {
        super("history_crud_service.CreateAttemptResponse", [
            { no: 1, name: "attempt", kind: "message", T: () => HistoryAttempt },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateAttemptResponse>): CreateAttemptResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateAttemptResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateAttemptResponse): CreateAttemptResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.HistoryAttempt attempt */ 1:
                    message.attempt = HistoryAttempt.internalBinaryRead(reader, reader.uint32(), options, message.attempt);
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateAttemptResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.HistoryAttempt attempt = 1; */
        if (message.attempt)
            HistoryAttempt.internalBinaryWrite(message.attempt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message history_crud_service.CreateAttemptResponse
 */
export const CreateAttemptResponse = new CreateAttemptResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditAttemptRequest$Type extends MessageType<EditAttemptRequest> {
    constructor() {
        super("history_crud_service.EditAttemptRequest", [
            { no: 1, name: "attempt", kind: "message", T: () => HistoryAttempt }
        ]);
    }
    create(value?: PartialMessage<EditAttemptRequest>): EditAttemptRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EditAttemptRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditAttemptRequest): EditAttemptRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.HistoryAttempt attempt */ 1:
                    message.attempt = HistoryAttempt.internalBinaryRead(reader, reader.uint32(), options, message.attempt);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditAttemptRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.HistoryAttempt attempt = 1; */
        if (message.attempt)
            HistoryAttempt.internalBinaryWrite(message.attempt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message history_crud_service.EditAttemptRequest
 */
export const EditAttemptRequest = new EditAttemptRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditAttemptResponse$Type extends MessageType<EditAttemptResponse> {
    constructor() {
        super("history_crud_service.EditAttemptResponse", [
            { no: 1, name: "attempt", kind: "message", T: () => HistoryAttempt },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EditAttemptResponse>): EditAttemptResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EditAttemptResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditAttemptResponse): EditAttemptResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.HistoryAttempt attempt */ 1:
                    message.attempt = HistoryAttempt.internalBinaryRead(reader, reader.uint32(), options, message.attempt);
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditAttemptResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.HistoryAttempt attempt = 1; */
        if (message.attempt)
            HistoryAttempt.internalBinaryWrite(message.attempt, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message history_crud_service.EditAttemptResponse
 */
export const EditAttemptResponse = new EditAttemptResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAttemptRequest$Type extends MessageType<DeleteAttemptRequest> {
    constructor() {
        super("history_crud_service.DeleteAttemptRequest", [
            { no: 1, name: "attempt_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteAttemptRequest>): DeleteAttemptRequest {
        const message = { attemptId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteAttemptRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAttemptRequest): DeleteAttemptRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 attempt_id */ 1:
                    message.attemptId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteAttemptRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 attempt_id = 1; */
        if (message.attemptId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.attemptId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message history_crud_service.DeleteAttemptRequest
 */
export const DeleteAttemptRequest = new DeleteAttemptRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteAttemptResponse$Type extends MessageType<DeleteAttemptResponse> {
    constructor() {
        super("history_crud_service.DeleteAttemptResponse", [
            { no: 1, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteAttemptResponse>): DeleteAttemptResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteAttemptResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteAttemptResponse): DeleteAttemptResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error_message */ 1:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteAttemptResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error_message = 1; */
        if (message.errorMessage !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message history_crud_service.DeleteAttemptResponse
 */
export const DeleteAttemptResponse = new DeleteAttemptResponse$Type();
/**
 * @generated ServiceType for protobuf service history_crud_service.HistoryCrudService
 */
export const HistoryCrudService = new ServiceType("history_crud_service.HistoryCrudService", [
    { name: "GetAttempt", options: {}, I: GetAttemptRequest, O: GetAttemptResponse },
    { name: "GetAttempts", options: {}, I: GetAttemptsRequest, O: GetAttemptsResponse },
    { name: "CreateAttempt", options: {}, I: CreateAttemptRequest, O: CreateAttemptResponse },
    { name: "EditAttempt", options: {}, I: EditAttemptRequest, O: EditAttemptResponse },
    { name: "DeleteAttempt", options: {}, I: DeleteAttemptRequest, O: DeleteAttemptResponse }
]);
