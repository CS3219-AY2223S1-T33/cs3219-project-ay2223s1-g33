/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "question-service.proto" (package "question_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Question } from "./types";
/**
 * @generated from protobuf message question_service.GetQuestionRequest
 */
export interface GetQuestionRequest {
    /**
     * @generated from protobuf field: common.Question question = 1;
     */
    question?: Question;
}
/**
 * @generated from protobuf message question_service.GetQuestionResponse
 */
export interface GetQuestionResponse {
    /**
     * @generated from protobuf field: common.Question question = 1;
     */
    question?: Question;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message question_service.CreateQuestionRequest
 */
export interface CreateQuestionRequest {
    /**
     * @generated from protobuf field: common.Question question = 1;
     */
    question?: Question;
}
/**
 * @generated from protobuf message question_service.CreateQuestionResponse
 */
export interface CreateQuestionResponse {
    /**
     * @generated from protobuf field: common.Question question = 1;
     */
    question?: Question;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message question_service.EditQuestionRequest
 */
export interface EditQuestionRequest {
    /**
     * @generated from protobuf field: common.Question question = 1;
     */
    question?: Question;
}
/**
 * @generated from protobuf message question_service.EditQuestionResponse
 */
export interface EditQuestionResponse {
    /**
     * @generated from protobuf field: common.Question question = 1;
     */
    question?: Question;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message question_service.DeleteQuestionRequest
 */
export interface DeleteQuestionRequest {
    /**
     * @generated from protobuf field: uint64 question_id = 1;
     */
    questionId: number;
}
/**
 * @generated from protobuf message question_service.DeleteQuestionResponse
 */
export interface DeleteQuestionResponse {
    /**
     * @generated from protobuf field: string error_message = 1;
     */
    errorMessage: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetQuestionRequest$Type extends MessageType<GetQuestionRequest> {
    constructor() {
        super("question_service.GetQuestionRequest", [
            { no: 1, name: "question", kind: "message", T: () => Question }
        ]);
    }
    create(value?: PartialMessage<GetQuestionRequest>): GetQuestionRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetQuestionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQuestionRequest): GetQuestionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.Question question */ 1:
                    message.question = Question.internalBinaryRead(reader, reader.uint32(), options, message.question);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQuestionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.Question question = 1; */
        if (message.question)
            Question.internalBinaryWrite(message.question, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message question_service.GetQuestionRequest
 */
export const GetQuestionRequest = new GetQuestionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetQuestionResponse$Type extends MessageType<GetQuestionResponse> {
    constructor() {
        super("question_service.GetQuestionResponse", [
            { no: 1, name: "question", kind: "message", T: () => Question },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetQuestionResponse>): GetQuestionResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetQuestionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetQuestionResponse): GetQuestionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.Question question */ 1:
                    message.question = Question.internalBinaryRead(reader, reader.uint32(), options, message.question);
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetQuestionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.Question question = 1; */
        if (message.question)
            Question.internalBinaryWrite(message.question, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message question_service.GetQuestionResponse
 */
export const GetQuestionResponse = new GetQuestionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateQuestionRequest$Type extends MessageType<CreateQuestionRequest> {
    constructor() {
        super("question_service.CreateQuestionRequest", [
            { no: 1, name: "question", kind: "message", T: () => Question }
        ]);
    }
    create(value?: PartialMessage<CreateQuestionRequest>): CreateQuestionRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateQuestionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateQuestionRequest): CreateQuestionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.Question question */ 1:
                    message.question = Question.internalBinaryRead(reader, reader.uint32(), options, message.question);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateQuestionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.Question question = 1; */
        if (message.question)
            Question.internalBinaryWrite(message.question, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message question_service.CreateQuestionRequest
 */
export const CreateQuestionRequest = new CreateQuestionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateQuestionResponse$Type extends MessageType<CreateQuestionResponse> {
    constructor() {
        super("question_service.CreateQuestionResponse", [
            { no: 1, name: "question", kind: "message", T: () => Question },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateQuestionResponse>): CreateQuestionResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateQuestionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateQuestionResponse): CreateQuestionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.Question question */ 1:
                    message.question = Question.internalBinaryRead(reader, reader.uint32(), options, message.question);
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateQuestionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.Question question = 1; */
        if (message.question)
            Question.internalBinaryWrite(message.question, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message question_service.CreateQuestionResponse
 */
export const CreateQuestionResponse = new CreateQuestionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditQuestionRequest$Type extends MessageType<EditQuestionRequest> {
    constructor() {
        super("question_service.EditQuestionRequest", [
            { no: 1, name: "question", kind: "message", T: () => Question }
        ]);
    }
    create(value?: PartialMessage<EditQuestionRequest>): EditQuestionRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EditQuestionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditQuestionRequest): EditQuestionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.Question question */ 1:
                    message.question = Question.internalBinaryRead(reader, reader.uint32(), options, message.question);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditQuestionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.Question question = 1; */
        if (message.question)
            Question.internalBinaryWrite(message.question, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message question_service.EditQuestionRequest
 */
export const EditQuestionRequest = new EditQuestionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EditQuestionResponse$Type extends MessageType<EditQuestionResponse> {
    constructor() {
        super("question_service.EditQuestionResponse", [
            { no: 1, name: "question", kind: "message", T: () => Question },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EditQuestionResponse>): EditQuestionResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EditQuestionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditQuestionResponse): EditQuestionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.Question question */ 1:
                    message.question = Question.internalBinaryRead(reader, reader.uint32(), options, message.question);
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditQuestionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.Question question = 1; */
        if (message.question)
            Question.internalBinaryWrite(message.question, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message question_service.EditQuestionResponse
 */
export const EditQuestionResponse = new EditQuestionResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteQuestionRequest$Type extends MessageType<DeleteQuestionRequest> {
    constructor() {
        super("question_service.DeleteQuestionRequest", [
            { no: 1, name: "question_id", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteQuestionRequest>): DeleteQuestionRequest {
        const message = { questionId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteQuestionRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteQuestionRequest): DeleteQuestionRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 question_id */ 1:
                    message.questionId = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteQuestionRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 question_id = 1; */
        if (message.questionId !== 0)
            writer.tag(1, WireType.Varint).uint64(message.questionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message question_service.DeleteQuestionRequest
 */
export const DeleteQuestionRequest = new DeleteQuestionRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeleteQuestionResponse$Type extends MessageType<DeleteQuestionResponse> {
    constructor() {
        super("question_service.DeleteQuestionResponse", [
            { no: 1, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DeleteQuestionResponse>): DeleteQuestionResponse {
        const message = { errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DeleteQuestionResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DeleteQuestionResponse): DeleteQuestionResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string error_message */ 1:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DeleteQuestionResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string error_message = 1; */
        if (message.errorMessage !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message question_service.DeleteQuestionResponse
 */
export const DeleteQuestionResponse = new DeleteQuestionResponse$Type();
/**
 * @generated ServiceType for protobuf service question_service.QuestionService
 */
export const QuestionService = new ServiceType("question_service.QuestionService", [
    { name: "GetQuestion", options: {}, I: GetQuestionRequest, O: GetQuestionResponse },
    { name: "CreateQuestion", options: {}, I: CreateQuestionRequest, O: CreateQuestionResponse },
    { name: "EditQuestion", options: {}, I: EditQuestionRequest, O: EditQuestionResponse },
    { name: "DeleteQuestion", options: {}, I: DeleteQuestionRequest, O: DeleteQuestionResponse }
]);
