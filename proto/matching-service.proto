syntax = "proto3";

package matching_service;
option go_package = "cs3219-project-ay2223s1-g33/proto";

import "types.proto";

enum JoinQueueErrorCode {
  JOIN_QUEUE_ERROR_NONE = 0;
  JOIN_QUEUE_ALREADY_IN_QUEUE = 1;
  JOIN_QUEUE_BAD_REQUEST = 100;
  JOIN_QUEUE_INTERNAL_ERROR = 101;
}

enum LeaveQueueErrorCode {
  LEAVE_QUEUE_ERROR_NONE = 0;
  LEAVE_QUEUE_NOT_IN_QUEUE = 1;
  LEAVE_QUEUE_BAD_REQUEST = 100;
  LEAVE_QUEUE_INTERNAL_ERROR = 101;
}

enum CheckQueueStatusErrorCode {
  CHECK_QUEUE_STATUS_ERROR_NONE = 0;
  CHECK_QUEUE_STATUS_ERROR_NOT_IN_QUEUE = 1;
  CHECK_QUEUE_STATUS_BAD_REQUEST = 100;
  CHECK_QUEUE_STATUS_INTERNAL_ERROR = 101;
}

enum QueueStatus {
  QUEUE_STATUS_PENDING = 0;
  QUEUE_STATUS_MATCHED = 1;
  QUEUE_STATUS_EXPIRED = 2;
  QUEUE_STATUS_INVALID = 3;
}

message JoinQueueRequest {
  repeated common.QuestionDifficulty difficulties = 1;
}

message JoinQueueResponse {
  string error_message = 1;
  JoinQueueErrorCode error_code = 2;
}

message CheckQueueStatusRequest {
}

message CheckQueueStatusResponse {
  QueueStatus queue_status = 1;
  string room_token = 2;
  string error_message = 3;
  CheckQueueStatusErrorCode error_code = 4;
}

message LeaveQueueRequest {
}

message LeaveQueueResponse {
  string error_message = 1;
  LeaveQueueErrorCode error_code = 2;
}

service QueueService {
  rpc JoinQueue(JoinQueueRequest) returns (JoinQueueResponse);
  rpc CheckQueueStatus(CheckQueueStatusRequest) returns (CheckQueueStatusResponse);
  rpc LeaveQueue(LeaveQueueRequest) returns (LeaveQueueResponse);
}