name: cd-build

on:
  push:
    branches:
      - feature/deployment-setup

env:
  AWS_REGION: ap-southeast-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: cs3219           # set this to your Amazon ECR repository name

jobs:
  deploy:
    name: Upload Images
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Set up repository
        uses: actions/checkout@v3

      - name: Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: '1.19'

      - name: 'Add dummy env files'
        run: 'touch matchmaker/.env && touch gateway/.env && touch session-service/.env'

      - name: 'Build Matchmaker'
        run: 'cd matchmaker && make build'

      - name: 'Build Gateway'
        run: 'cd gateway && make build'

      - name: 'Build Session Service'
        run: 'cd session-service && make build'

      - name: Build y-socket
        run: 'npm run gen-y-websocket'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push images to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.

          # node services

          # frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG -f ./frontend/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG

          # question-service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:question-service-$IMAGE_TAG -f ./question-service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:question-service-$IMAGE_TAG

          # matching-service 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:matching-service-$IMAGE_TAG -f ./matching-service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:matching-service-$IMAGE_TAG

          # collab-service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:collab-service-$IMAGE_TAG -f ./collab-service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:collab-service-$IMAGE_TAG

          # user-service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:user-service-$IMAGE_TAG -f ./user-service/Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:user-service-$IMAGE_TAG

          # go services

          # matchmaker
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:matchmaker-$IMAGE_TAG -f ./matchmaker/Dockerfile ./matchmaker
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:matchmaker-$IMAGE_TAG

          # gateway
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:gateway-$IMAGE_TAG -f ./gateway/Dockerfile ./gateway
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:gateway-$IMAGE_TAG

          # session-service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:session-service-$IMAGE_TAG -f ./session-service/Dockerfile ./session-service
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:session-service-$IMAGE_TAG

          # redis
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:redis-$IMAGE_TAG -f ./images/redis.dockerfile ./images
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:redis-$IMAGE_TAG


          