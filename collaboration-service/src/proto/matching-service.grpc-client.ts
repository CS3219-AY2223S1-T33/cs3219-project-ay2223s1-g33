/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "matching-service.proto" (package "matching_service", syntax proto3)
// tslint:disable
import { QueueService } from "./matching-service";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { CheckQueueStatusResponse } from "./matching-service";
import type { CheckQueueStatusRequest } from "./matching-service";
import type { JoinQueueResponse } from "./matching-service";
import type { JoinQueueRequest } from "./matching-service";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service matching_service.QueueService
 */
export interface IQueueServiceClient {
    /**
     * @generated from protobuf rpc: JoinQueue(matching_service.JoinQueueRequest) returns (matching_service.JoinQueueResponse);
     */
    joinQueue(input: JoinQueueRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: JoinQueueResponse) => void): grpc.ClientUnaryCall;
    joinQueue(input: JoinQueueRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: JoinQueueResponse) => void): grpc.ClientUnaryCall;
    joinQueue(input: JoinQueueRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: JoinQueueResponse) => void): grpc.ClientUnaryCall;
    joinQueue(input: JoinQueueRequest, callback: (err: grpc.ServiceError | null, value?: JoinQueueResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: CheckQueueStatus(matching_service.CheckQueueStatusRequest) returns (matching_service.CheckQueueStatusResponse);
     */
    checkQueueStatus(input: CheckQueueStatusRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: CheckQueueStatusResponse) => void): grpc.ClientUnaryCall;
    checkQueueStatus(input: CheckQueueStatusRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: CheckQueueStatusResponse) => void): grpc.ClientUnaryCall;
    checkQueueStatus(input: CheckQueueStatusRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: CheckQueueStatusResponse) => void): grpc.ClientUnaryCall;
    checkQueueStatus(input: CheckQueueStatusRequest, callback: (err: grpc.ServiceError | null, value?: CheckQueueStatusResponse) => void): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service matching_service.QueueService
 */
export class QueueServiceClient extends grpc.Client implements IQueueServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: JoinQueue(matching_service.JoinQueueRequest) returns (matching_service.JoinQueueResponse);
     */
    joinQueue(input: JoinQueueRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: JoinQueueResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: JoinQueueResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: JoinQueueResponse) => void)): grpc.ClientUnaryCall {
        const method = QueueService.methods[0];
        return this.makeUnaryRequest<JoinQueueRequest, JoinQueueResponse>(`/${QueueService.typeName}/${method.name}`, (value: JoinQueueRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): JoinQueueResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: CheckQueueStatus(matching_service.CheckQueueStatusRequest) returns (matching_service.CheckQueueStatusResponse);
     */
    checkQueueStatus(input: CheckQueueStatusRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: CheckQueueStatusResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: CheckQueueStatusResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: CheckQueueStatusResponse) => void)): grpc.ClientUnaryCall {
        const method = QueueService.methods[1];
        return this.makeUnaryRequest<CheckQueueStatusRequest, CheckQueueStatusResponse>(`/${QueueService.typeName}/${method.name}`, (value: CheckQueueStatusRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): CheckQueueStatusResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
