// Code generated by MockGen. DO NOT EDIT.
// Source: cs3219-project-ay2223s1-g33/session-service/token (interfaces: TokenAgent)

// Package token is a generated GoMock package.
package token

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenAgent is a mock of TokenAgent interface.
type MockTokenAgent struct {
	ctrl     *gomock.Controller
	recorder *MockTokenAgentMockRecorder
}

// MockTokenAgentMockRecorder is the mock recorder for MockTokenAgent.
type MockTokenAgentMockRecorder struct {
	mock *MockTokenAgent
}

// NewMockTokenAgent creates a new mock instance.
func NewMockTokenAgent(ctrl *gomock.Controller) *MockTokenAgent {
	mock := &MockTokenAgent{ctrl: ctrl}
	mock.recorder = &MockTokenAgentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenAgent) EXPECT() *MockTokenAgentMockRecorder {
	return m.recorder
}

// BlacklistToken mocks base method.
func (m *MockTokenAgent) BlacklistToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlacklistToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BlacklistToken indicates an expected call of BlacklistToken.
func (mr *MockTokenAgentMockRecorder) BlacklistToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlacklistToken", reflect.TypeOf((*MockTokenAgent)(nil).BlacklistToken), arg0)
}

// CreateToken mocks base method.
func (m *MockTokenAgent) CreateToken(arg0 *TokenData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockTokenAgentMockRecorder) CreateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockTokenAgent)(nil).CreateToken), arg0)
}

// UnblacklistToken mocks base method.
func (m *MockTokenAgent) UnblacklistToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnblacklistToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnblacklistToken indicates an expected call of UnblacklistToken.
func (mr *MockTokenAgentMockRecorder) UnblacklistToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnblacklistToken", reflect.TypeOf((*MockTokenAgent)(nil).UnblacklistToken), arg0)
}

// ValidateToken mocks base method.
func (m *MockTokenAgent) ValidateToken(arg0 string) (*TokenData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateToken", arg0)
	ret0, _ := ret[0].(*TokenData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateToken indicates an expected call of ValidateToken.
func (mr *MockTokenAgentMockRecorder) ValidateToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateToken", reflect.TypeOf((*MockTokenAgent)(nil).ValidateToken), arg0)
}
