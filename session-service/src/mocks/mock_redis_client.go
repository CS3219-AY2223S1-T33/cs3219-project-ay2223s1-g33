// Code generated by MockGen. DO NOT EDIT.
// Source: cs3219-project-ay2223s1-g33/session-service/conn (interfaces: RedisBlacklistClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisBlacklistClient is a mock of RedisBlacklistClient interface.
type MockRedisBlacklistClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedisBlacklistClientMockRecorder
}

// MockRedisBlacklistClientMockRecorder is the mock recorder for MockRedisBlacklistClient.
type MockRedisBlacklistClientMockRecorder struct {
	mock *MockRedisBlacklistClient
}

// NewMockRedisBlacklistClient creates a new mock instance.
func NewMockRedisBlacklistClient(ctrl *gomock.Controller) *MockRedisBlacklistClient {
	mock := &MockRedisBlacklistClient{ctrl: ctrl}
	mock.recorder = &MockRedisBlacklistClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisBlacklistClient) EXPECT() *MockRedisBlacklistClientMockRecorder {
	return m.recorder
}

// AddToken mocks base method.
func (m *MockRedisBlacklistClient) AddToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToken indicates an expected call of AddToken.
func (mr *MockRedisBlacklistClientMockRecorder) AddToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToken", reflect.TypeOf((*MockRedisBlacklistClient)(nil).AddToken), arg0)
}

// Close mocks base method.
func (m *MockRedisBlacklistClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockRedisBlacklistClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedisBlacklistClient)(nil).Close))
}

// Connect mocks base method.
func (m *MockRedisBlacklistClient) Connect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect")
}

// Connect indicates an expected call of Connect.
func (mr *MockRedisBlacklistClientMockRecorder) Connect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRedisBlacklistClient)(nil).Connect))
}

// IsTokenBlacklisted mocks base method.
func (m *MockRedisBlacklistClient) IsTokenBlacklisted(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenBlacklisted", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTokenBlacklisted indicates an expected call of IsTokenBlacklisted.
func (mr *MockRedisBlacklistClientMockRecorder) IsTokenBlacklisted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenBlacklisted", reflect.TypeOf((*MockRedisBlacklistClient)(nil).IsTokenBlacklisted), arg0)
}

// RemoveToken mocks base method.
func (m *MockRedisBlacklistClient) RemoveToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveToken indicates an expected call of RemoveToken.
func (mr *MockRedisBlacklistClientMockRecorder) RemoveToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveToken", reflect.TypeOf((*MockRedisBlacklistClient)(nil).RemoveToken), arg0)
}
