// Code generated by MockGen. DO NOT EDIT.
// Source: cs3219-project-ay2223s1-g33/session-service/blacklist (interfaces: TokenBlacklistWriter,TokenBlacklistQuerier)

// Package mocks is a generated GoMock package.
package mocks

import (
	blacklist "cs3219-project-ay2223s1-g33/session-service/blacklist"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenBlacklistWriter is a mock of TokenBlacklistWriter interface.
type MockTokenBlacklistWriter struct {
	ctrl     *gomock.Controller
	recorder *MockTokenBlacklistWriterMockRecorder
}

// MockTokenBlacklistWriterMockRecorder is the mock recorder for MockTokenBlacklistWriter.
type MockTokenBlacklistWriterMockRecorder struct {
	mock *MockTokenBlacklistWriter
}

// NewMockTokenBlacklistWriter creates a new mock instance.
func NewMockTokenBlacklistWriter(ctrl *gomock.Controller) *MockTokenBlacklistWriter {
	mock := &MockTokenBlacklistWriter{ctrl: ctrl}
	mock.recorder = &MockTokenBlacklistWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenBlacklistWriter) EXPECT() *MockTokenBlacklistWriterMockRecorder {
	return m.recorder
}

// AddToken mocks base method.
func (m *MockTokenBlacklistWriter) AddToken(arg0 *blacklist.IssuedToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToken indicates an expected call of AddToken.
func (mr *MockTokenBlacklistWriterMockRecorder) AddToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToken", reflect.TypeOf((*MockTokenBlacklistWriter)(nil).AddToken), arg0)
}

// RemoveToken mocks base method.
func (m *MockTokenBlacklistWriter) RemoveToken(arg0 *blacklist.IssuedToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveToken indicates an expected call of RemoveToken.
func (mr *MockTokenBlacklistWriterMockRecorder) RemoveToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveToken", reflect.TypeOf((*MockTokenBlacklistWriter)(nil).RemoveToken), arg0)
}

// MockTokenBlacklistQuerier is a mock of TokenBlacklistQuerier interface.
type MockTokenBlacklistQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockTokenBlacklistQuerierMockRecorder
}

// MockTokenBlacklistQuerierMockRecorder is the mock recorder for MockTokenBlacklistQuerier.
type MockTokenBlacklistQuerierMockRecorder struct {
	mock *MockTokenBlacklistQuerier
}

// NewMockTokenBlacklistQuerier creates a new mock instance.
func NewMockTokenBlacklistQuerier(ctrl *gomock.Controller) *MockTokenBlacklistQuerier {
	mock := &MockTokenBlacklistQuerier{ctrl: ctrl}
	mock.recorder = &MockTokenBlacklistQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenBlacklistQuerier) EXPECT() *MockTokenBlacklistQuerierMockRecorder {
	return m.recorder
}

// IsTokenBlacklisted mocks base method.
func (m *MockTokenBlacklistQuerier) IsTokenBlacklisted(arg0 *blacklist.IssuedToken) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenBlacklisted", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTokenBlacklisted indicates an expected call of IsTokenBlacklisted.
func (mr *MockTokenBlacklistQuerierMockRecorder) IsTokenBlacklisted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenBlacklisted", reflect.TypeOf((*MockTokenBlacklistQuerier)(nil).IsTokenBlacklisted), arg0)
}
