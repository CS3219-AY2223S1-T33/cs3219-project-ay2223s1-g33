// Code generated by MockGen. DO NOT EDIT.
// Source: cs3219-project-ay2223s1-g33/session-service/token (interfaces: TokenBlacklist)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTokenBlacklist is a mock of TokenBlacklist interface.
type MockTokenBlacklist struct {
	ctrl     *gomock.Controller
	recorder *MockTokenBlacklistMockRecorder
}

// MockTokenBlacklistMockRecorder is the mock recorder for MockTokenBlacklist.
type MockTokenBlacklistMockRecorder struct {
	mock *MockTokenBlacklist
}

// NewMockTokenBlacklist creates a new mock instance.
func NewMockTokenBlacklist(ctrl *gomock.Controller) *MockTokenBlacklist {
	mock := &MockTokenBlacklist{ctrl: ctrl}
	mock.recorder = &MockTokenBlacklistMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenBlacklist) EXPECT() *MockTokenBlacklistMockRecorder {
	return m.recorder
}

// AddToken mocks base method.
func (m *MockTokenBlacklist) AddToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToken indicates an expected call of AddToken.
func (mr *MockTokenBlacklistMockRecorder) AddToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToken", reflect.TypeOf((*MockTokenBlacklist)(nil).AddToken), arg0)
}

// IsTokenBlacklisted mocks base method.
func (m *MockTokenBlacklist) IsTokenBlacklisted(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTokenBlacklisted", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTokenBlacklisted indicates an expected call of IsTokenBlacklisted.
func (mr *MockTokenBlacklistMockRecorder) IsTokenBlacklisted(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTokenBlacklisted", reflect.TypeOf((*MockTokenBlacklist)(nil).IsTokenBlacklisted), arg0)
}

// RemoveToken mocks base method.
func (m *MockTokenBlacklist) RemoveToken(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveToken indicates an expected call of RemoveToken.
func (mr *MockTokenBlacklistMockRecorder) RemoveToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveToken", reflect.TypeOf((*MockTokenBlacklist)(nil).RemoveToken), arg0)
}
