/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "session-service.proto" (package "session_service", syntax proto3)
// tslint:disable
import { SessionService } from "./session-service";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { AddBlacklistResponse } from "./session-service";
import type { AddBlacklistRequest } from "./session-service";
import type { ValidateTokenResponse } from "./session-service";
import type { ValidateTokenRequest } from "./session-service";
import type { CreateTokenResponse } from "./session-service";
import type { CreateTokenRequest } from "./session-service";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service session_service.SessionService
 */
export interface ISessionServiceClient {
    /**
     * @generated from protobuf rpc: CreateToken(session_service.CreateTokenRequest) returns (session_service.CreateTokenResponse);
     */
    createToken(input: CreateTokenRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: CreateTokenResponse) => void): grpc.ClientUnaryCall;
    createToken(input: CreateTokenRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: CreateTokenResponse) => void): grpc.ClientUnaryCall;
    createToken(input: CreateTokenRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: CreateTokenResponse) => void): grpc.ClientUnaryCall;
    createToken(input: CreateTokenRequest, callback: (err: grpc.ServiceError | null, value?: CreateTokenResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: ValidateToken(session_service.ValidateTokenRequest) returns (session_service.ValidateTokenResponse);
     */
    validateToken(input: ValidateTokenRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ValidateTokenResponse) => void): grpc.ClientUnaryCall;
    validateToken(input: ValidateTokenRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ValidateTokenResponse) => void): grpc.ClientUnaryCall;
    validateToken(input: ValidateTokenRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ValidateTokenResponse) => void): grpc.ClientUnaryCall;
    validateToken(input: ValidateTokenRequest, callback: (err: grpc.ServiceError | null, value?: ValidateTokenResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: AddBlacklist(session_service.AddBlacklistRequest) returns (session_service.AddBlacklistResponse);
     */
    addBlacklist(input: AddBlacklistRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AddBlacklistResponse) => void): grpc.ClientUnaryCall;
    addBlacklist(input: AddBlacklistRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: AddBlacklistResponse) => void): grpc.ClientUnaryCall;
    addBlacklist(input: AddBlacklistRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AddBlacklistResponse) => void): grpc.ClientUnaryCall;
    addBlacklist(input: AddBlacklistRequest, callback: (err: grpc.ServiceError | null, value?: AddBlacklistResponse) => void): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service session_service.SessionService
 */
export class SessionServiceClient extends grpc.Client implements ISessionServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: CreateToken(session_service.CreateTokenRequest) returns (session_service.CreateTokenResponse);
     */
    createToken(input: CreateTokenRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: CreateTokenResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: CreateTokenResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: CreateTokenResponse) => void)): grpc.ClientUnaryCall {
        const method = SessionService.methods[0];
        return this.makeUnaryRequest<CreateTokenRequest, CreateTokenResponse>(`/${SessionService.typeName}/${method.name}`, (value: CreateTokenRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): CreateTokenResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: ValidateToken(session_service.ValidateTokenRequest) returns (session_service.ValidateTokenResponse);
     */
    validateToken(input: ValidateTokenRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ValidateTokenResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ValidateTokenResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: ValidateTokenResponse) => void)): grpc.ClientUnaryCall {
        const method = SessionService.methods[1];
        return this.makeUnaryRequest<ValidateTokenRequest, ValidateTokenResponse>(`/${SessionService.typeName}/${method.name}`, (value: ValidateTokenRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ValidateTokenResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: AddBlacklist(session_service.AddBlacklistRequest) returns (session_service.AddBlacklistResponse);
     */
    addBlacklist(input: AddBlacklistRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AddBlacklistResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AddBlacklistResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: AddBlacklistResponse) => void)): grpc.ClientUnaryCall {
        const method = SessionService.methods[2];
        return this.makeUnaryRequest<AddBlacklistRequest, AddBlacklistResponse>(`/${SessionService.typeName}/${method.name}`, (value: AddBlacklistRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): AddBlacklistResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
