/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "user-bff-service.proto" (package "user_bff_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { User } from "./types";
/**
 * @generated from protobuf message user_bff_service.UserCredentials
 */
export interface UserCredentials {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message user_bff_service.LoginRequest
 */
export interface LoginRequest {
    /**
     * @generated from protobuf field: user_bff_service.UserCredentials credentials = 1;
     */
    credentials?: UserCredentials;
}
/**
 * @generated from protobuf message user_bff_service.LoginResponse
 */
export interface LoginResponse {
    /**
     * @generated from protobuf field: common.User user = 1;
     */
    user?: User;
    /**
     * @generated from protobuf field: string session_token = 2;
     */
    sessionToken: string;
    /**
     * @generated from protobuf field: user_bff_service.LoginErrorCode error_code = 3;
     */
    errorCode: LoginErrorCode;
    /**
     * @generated from protobuf field: string error_message = 4;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf message user_bff_service.RegisterRequest
 */
export interface RegisterRequest {
    /**
     * @generated from protobuf field: user_bff_service.UserCredentials credentials = 1;
     */
    credentials?: UserCredentials;
    /**
     * @generated from protobuf field: string nickname = 2;
     */
    nickname: string;
}
/**
 * @generated from protobuf message user_bff_service.RegisterResponse
 */
export interface RegisterResponse {
    /**
     * @generated from protobuf field: user_bff_service.RegisterErrorCode error_code = 1;
     */
    errorCode: RegisterErrorCode;
    /**
     * @generated from protobuf field: string error_message = 2;
     */
    errorMessage: string;
}
/**
 * @generated from protobuf enum user_bff_service.LoginErrorCode
 */
export enum LoginErrorCode {
    /**
     * @generated from protobuf enum value: LOGIN_ERROR_NONE = 0;
     */
    LOGIN_ERROR_NONE = 0,
    /**
     * @generated from protobuf enum value: LOGIN_ERROR_INVALID_CREDENTIALS = 1;
     */
    LOGIN_ERROR_INVALID_CREDENTIALS = 1,
    /**
     * @generated from protobuf enum value: LOGIN_ERROR_DISABLED_ACCOUNT = 2;
     */
    LOGIN_ERROR_DISABLED_ACCOUNT = 2,
    /**
     * @generated from protobuf enum value: LOGIN_ERROR_BAD_REQUEST = 100;
     */
    LOGIN_ERROR_BAD_REQUEST = 100,
    /**
     * @generated from protobuf enum value: LOGIN_ERROR_INTERNAL_ERROR = 101;
     */
    LOGIN_ERROR_INTERNAL_ERROR = 101
}
/**
 * @generated from protobuf enum user_bff_service.RegisterErrorCode
 */
export enum RegisterErrorCode {
    /**
     * @generated from protobuf enum value: REGISTER_ERROR_NONE = 0;
     */
    REGISTER_ERROR_NONE = 0,
    /**
     * @generated from protobuf enum value: REGISTER_ERROR_USERNAME_EXISTS = 1;
     */
    REGISTER_ERROR_USERNAME_EXISTS = 1,
    /**
     * @generated from protobuf enum value: REGISTER_ERROR_BAD_REQUEST = 100;
     */
    REGISTER_ERROR_BAD_REQUEST = 100,
    /**
     * @generated from protobuf enum value: REGISTER_ERROR_INTERNAL_ERROR = 101;
     */
    REGISTER_ERROR_INTERNAL_ERROR = 101
}
// @generated message type with reflection information, may provide speed optimized methods
class UserCredentials$Type extends MessageType<UserCredentials> {
    constructor() {
        super("user_bff_service.UserCredentials", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UserCredentials>): UserCredentials {
        const message = { username: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserCredentials>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserCredentials): UserCredentials {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserCredentials, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_bff_service.UserCredentials
 */
export const UserCredentials = new UserCredentials$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginRequest$Type extends MessageType<LoginRequest> {
    constructor() {
        super("user_bff_service.LoginRequest", [
            { no: 1, name: "credentials", kind: "message", T: () => UserCredentials }
        ]);
    }
    create(value?: PartialMessage<LoginRequest>): LoginRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginRequest): LoginRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user_bff_service.UserCredentials credentials */ 1:
                    message.credentials = UserCredentials.internalBinaryRead(reader, reader.uint32(), options, message.credentials);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user_bff_service.UserCredentials credentials = 1; */
        if (message.credentials)
            UserCredentials.internalBinaryWrite(message.credentials, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_bff_service.LoginRequest
 */
export const LoginRequest = new LoginRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoginResponse$Type extends MessageType<LoginResponse> {
    constructor() {
        super("user_bff_service.LoginResponse", [
            { no: 1, name: "user", kind: "message", T: () => User },
            { no: 2, name: "session_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "error_code", kind: "enum", T: () => ["user_bff_service.LoginErrorCode", LoginErrorCode] },
            { no: 4, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<LoginResponse>): LoginResponse {
        const message = { sessionToken: "", errorCode: 0, errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LoginResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LoginResponse): LoginResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* common.User user */ 1:
                    message.user = User.internalBinaryRead(reader, reader.uint32(), options, message.user);
                    break;
                case /* string session_token */ 2:
                    message.sessionToken = reader.string();
                    break;
                case /* user_bff_service.LoginErrorCode error_code */ 3:
                    message.errorCode = reader.int32();
                    break;
                case /* string error_message */ 4:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LoginResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* common.User user = 1; */
        if (message.user)
            User.internalBinaryWrite(message.user, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string session_token = 2; */
        if (message.sessionToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.sessionToken);
        /* user_bff_service.LoginErrorCode error_code = 3; */
        if (message.errorCode !== 0)
            writer.tag(3, WireType.Varint).int32(message.errorCode);
        /* string error_message = 4; */
        if (message.errorMessage !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_bff_service.LoginResponse
 */
export const LoginResponse = new LoginResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterRequest$Type extends MessageType<RegisterRequest> {
    constructor() {
        super("user_bff_service.RegisterRequest", [
            { no: 1, name: "credentials", kind: "message", T: () => UserCredentials },
            { no: 2, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterRequest>): RegisterRequest {
        const message = { nickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegisterRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterRequest): RegisterRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user_bff_service.UserCredentials credentials */ 1:
                    message.credentials = UserCredentials.internalBinaryRead(reader, reader.uint32(), options, message.credentials);
                    break;
                case /* string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user_bff_service.UserCredentials credentials = 1; */
        if (message.credentials)
            UserCredentials.internalBinaryWrite(message.credentials, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* string nickname = 2; */
        if (message.nickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_bff_service.RegisterRequest
 */
export const RegisterRequest = new RegisterRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterResponse$Type extends MessageType<RegisterResponse> {
    constructor() {
        super("user_bff_service.RegisterResponse", [
            { no: 1, name: "error_code", kind: "enum", T: () => ["user_bff_service.RegisterErrorCode", RegisterErrorCode] },
            { no: 2, name: "error_message", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RegisterResponse>): RegisterResponse {
        const message = { errorCode: 0, errorMessage: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegisterResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterResponse): RegisterResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* user_bff_service.RegisterErrorCode error_code */ 1:
                    message.errorCode = reader.int32();
                    break;
                case /* string error_message */ 2:
                    message.errorMessage = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* user_bff_service.RegisterErrorCode error_code = 1; */
        if (message.errorCode !== 0)
            writer.tag(1, WireType.Varint).int32(message.errorCode);
        /* string error_message = 2; */
        if (message.errorMessage !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.errorMessage);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message user_bff_service.RegisterResponse
 */
export const RegisterResponse = new RegisterResponse$Type();
/**
 * @generated ServiceType for protobuf service user_bff_service.UserBFFService
 */
export const UserBFFService = new ServiceType("user_bff_service.UserBFFService", [
    { name: "Login", options: {}, I: LoginRequest, O: LoginResponse },
    { name: "Register", options: {}, I: RegisterRequest, O: RegisterResponse }
]);
