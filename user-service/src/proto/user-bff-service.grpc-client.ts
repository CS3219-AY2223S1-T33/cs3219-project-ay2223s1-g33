// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1
// @generated from protobuf file "user-bff-service.proto" (package "user_bff_service", syntax proto3)
// tslint:disable
import { UserBFFService } from "./user-bff-service";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { RegisterRresponse } from "./user-bff-service";
import type { RegisterRequest } from "./user-bff-service";
import type { LoginResponse } from "./user-bff-service";
import type { LoginRequest } from "./user-bff-service";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service user_bff_service.UserBFFService
 */
export interface IUserBFFServiceClient {
    /**
     * @generated from protobuf rpc: Login(user_bff_service.LoginRequest) returns (user_bff_service.LoginResponse);
     */
    login(input: LoginRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: LoginResponse) => void): grpc.ClientUnaryCall;
    login(input: LoginRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: LoginResponse) => void): grpc.ClientUnaryCall;
    login(input: LoginRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: LoginResponse) => void): grpc.ClientUnaryCall;
    login(input: LoginRequest, callback: (err: grpc.ServiceError | null, value?: LoginResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: Register(user_bff_service.RegisterRequest) returns (user_bff_service.RegisterRresponse);
     */
    register(input: RegisterRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: RegisterRresponse) => void): grpc.ClientUnaryCall;
    register(input: RegisterRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: RegisterRresponse) => void): grpc.ClientUnaryCall;
    register(input: RegisterRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: RegisterRresponse) => void): grpc.ClientUnaryCall;
    register(input: RegisterRequest, callback: (err: grpc.ServiceError | null, value?: RegisterRresponse) => void): grpc.ClientUnaryCall;
}
/**
 * @generated from protobuf service user_bff_service.UserBFFService
 */
export class UserBFFServiceClient extends grpc.Client implements IUserBFFServiceClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: Login(user_bff_service.LoginRequest) returns (user_bff_service.LoginResponse);
     */
    login(input: LoginRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: LoginResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: LoginResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: LoginResponse) => void)): grpc.ClientUnaryCall {
        const method = UserBFFService.methods[0];
        return this.makeUnaryRequest<LoginRequest, LoginResponse>(`/${UserBFFService.typeName}/${method.name}`, (value: LoginRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): LoginResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: Register(user_bff_service.RegisterRequest) returns (user_bff_service.RegisterRresponse);
     */
    register(input: RegisterRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: RegisterRresponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: RegisterRresponse) => void), callback?: ((err: grpc.ServiceError | null, value?: RegisterRresponse) => void)): grpc.ClientUnaryCall {
        const method = UserBFFService.methods[1];
        return this.makeUnaryRequest<RegisterRequest, RegisterRresponse>(`/${UserBFFService.typeName}/${method.name}`, (value: RegisterRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): RegisterRresponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
}
