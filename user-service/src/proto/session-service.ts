/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "session-service.proto" (package "session_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message session_service.UserTimestampPair
 */
export interface UserTimestampPair {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: uint64 timestamp = 2;
     */
    timestamp: number;
}
/**
 * @generated from protobuf message session_service.CreateTokenRequest
 */
export interface CreateTokenRequest {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string nickname = 2;
     */
    nickname: string;
}
/**
 * @generated from protobuf message session_service.CreateTokenResponse
 */
export interface CreateTokenResponse {
    /**
     * @generated from protobuf field: string session_token = 1;
     */
    sessionToken: string;
    /**
     * @generated from protobuf field: string refresh_token = 2;
     */
    refreshToken: string;
    /**
     * @generated from protobuf field: session_service.CreateTokenErrorCode error_code = 3;
     */
    errorCode: CreateTokenErrorCode;
}
/**
 * @generated from protobuf message session_service.ValidateTokenRequest
 */
export interface ValidateTokenRequest {
    /**
     * @generated from protobuf field: string session_token = 1;
     */
    sessionToken: string;
    /**
     * @generated from protobuf field: string refresh_token = 2;
     */
    refreshToken: string;
}
/**
 * @generated from protobuf message session_service.ValidateTokenResponse
 */
export interface ValidateTokenResponse {
    /**
     * @generated from protobuf field: string email = 1;
     */
    email: string;
    /**
     * @generated from protobuf field: string nickname = 2;
     */
    nickname: string;
    /**
     * @generated from protobuf field: string new_session_token = 3;
     */
    newSessionToken: string;
    /**
     * @generated from protobuf field: session_service.ValidateTokenErrorCode error_code = 4;
     */
    errorCode: ValidateTokenErrorCode;
}
/**
 * @generated from protobuf message session_service.AddBlacklistRequest
 */
export interface AddBlacklistRequest {
    /**
     * @generated from protobuf field: string session_token = 1;
     */
    sessionToken: string;
    /**
     * @generated from protobuf field: string refresh_token = 2;
     */
    refreshToken: string;
    /**
     * @generated from protobuf field: session_service.UserTimestampPair user_before = 3;
     */
    userBefore?: UserTimestampPair;
}
/**
 * @generated from protobuf message session_service.AddBlacklistResponse
 */
export interface AddBlacklistResponse {
    /**
     * @generated from protobuf field: session_service.AddBlacklistErrorCode error_code = 1;
     */
    errorCode: AddBlacklistErrorCode;
}
/**
 * @generated from protobuf enum session_service.CreateTokenErrorCode
 */
export enum CreateTokenErrorCode {
    /**
     * @generated from protobuf enum value: CREATE_TOKEN_NO_ERROR = 0;
     */
    CREATE_TOKEN_NO_ERROR = 0,
    /**
     * @generated from protobuf enum value: CREATE_TOKEN_BAD_REQUEST = 1;
     */
    CREATE_TOKEN_BAD_REQUEST = 1,
    /**
     * @generated from protobuf enum value: CREATE_TOKEN_ERROR_INTERNAL = 100;
     */
    CREATE_TOKEN_ERROR_INTERNAL = 100
}
/**
 * @generated from protobuf enum session_service.ValidateTokenErrorCode
 */
export enum ValidateTokenErrorCode {
    /**
     * @generated from protobuf enum value: VALIDATE_TOKEN_NO_ERROR = 0;
     */
    VALIDATE_TOKEN_NO_ERROR = 0,
    /**
     * @generated from protobuf enum value: VALIDATE_TOKEN_ERROR_INVALID = 1;
     */
    VALIDATE_TOKEN_ERROR_INVALID = 1,
    /**
     * @generated from protobuf enum value: VALIDATE_TOKEN_ERROR_EXPIRED = 2;
     */
    VALIDATE_TOKEN_ERROR_EXPIRED = 2,
    /**
     * @generated from protobuf enum value: VALIDATE_TOKEN_ERROR_INTERNAL = 100;
     */
    VALIDATE_TOKEN_ERROR_INTERNAL = 100
}
/**
 * @generated from protobuf enum session_service.AddBlacklistErrorCode
 */
export enum AddBlacklistErrorCode {
    /**
     * @generated from protobuf enum value: ADD_BLACKLIST_NO_ERROR = 0;
     */
    ADD_BLACKLIST_NO_ERROR = 0,
    /**
     * @generated from protobuf enum value: ADD_BLACKLIST_ERROR_INTERNAL = 100;
     */
    ADD_BLACKLIST_ERROR_INTERNAL = 100
}
// @generated message type with reflection information, may provide speed optimized methods
class UserTimestampPair$Type extends MessageType<UserTimestampPair> {
    constructor() {
        super("session_service.UserTimestampPair", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "timestamp", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 2 /*LongType.NUMBER*/ }
        ]);
    }
    create(value?: PartialMessage<UserTimestampPair>): UserTimestampPair {
        const message = { username: "", timestamp: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UserTimestampPair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UserTimestampPair): UserTimestampPair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* uint64 timestamp */ 2:
                    message.timestamp = reader.uint64().toNumber();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UserTimestampPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* uint64 timestamp = 2; */
        if (message.timestamp !== 0)
            writer.tag(2, WireType.Varint).uint64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session_service.UserTimestampPair
 */
export const UserTimestampPair = new UserTimestampPair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTokenRequest$Type extends MessageType<CreateTokenRequest> {
    constructor() {
        super("session_service.CreateTokenRequest", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CreateTokenRequest>): CreateTokenRequest {
        const message = { email: "", nickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTokenRequest): CreateTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string nickname = 2; */
        if (message.nickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session_service.CreateTokenRequest
 */
export const CreateTokenRequest = new CreateTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateTokenResponse$Type extends MessageType<CreateTokenResponse> {
    constructor() {
        super("session_service.CreateTokenResponse", [
            { no: 1, name: "session_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "error_code", kind: "enum", T: () => ["session_service.CreateTokenErrorCode", CreateTokenErrorCode] }
        ]);
    }
    create(value?: PartialMessage<CreateTokenResponse>): CreateTokenResponse {
        const message = { sessionToken: "", refreshToken: "", errorCode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateTokenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateTokenResponse): CreateTokenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_token */ 1:
                    message.sessionToken = reader.string();
                    break;
                case /* string refresh_token */ 2:
                    message.refreshToken = reader.string();
                    break;
                case /* session_service.CreateTokenErrorCode error_code */ 3:
                    message.errorCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateTokenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_token = 1; */
        if (message.sessionToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionToken);
        /* string refresh_token = 2; */
        if (message.refreshToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.refreshToken);
        /* session_service.CreateTokenErrorCode error_code = 3; */
        if (message.errorCode !== 0)
            writer.tag(3, WireType.Varint).int32(message.errorCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session_service.CreateTokenResponse
 */
export const CreateTokenResponse = new CreateTokenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidateTokenRequest$Type extends MessageType<ValidateTokenRequest> {
    constructor() {
        super("session_service.ValidateTokenRequest", [
            { no: 1, name: "session_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ValidateTokenRequest>): ValidateTokenRequest {
        const message = { sessionToken: "", refreshToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ValidateTokenRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidateTokenRequest): ValidateTokenRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_token */ 1:
                    message.sessionToken = reader.string();
                    break;
                case /* string refresh_token */ 2:
                    message.refreshToken = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidateTokenRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_token = 1; */
        if (message.sessionToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionToken);
        /* string refresh_token = 2; */
        if (message.refreshToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.refreshToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session_service.ValidateTokenRequest
 */
export const ValidateTokenRequest = new ValidateTokenRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ValidateTokenResponse$Type extends MessageType<ValidateTokenResponse> {
    constructor() {
        super("session_service.ValidateTokenResponse", [
            { no: 1, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "new_session_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "error_code", kind: "enum", T: () => ["session_service.ValidateTokenErrorCode", ValidateTokenErrorCode] }
        ]);
    }
    create(value?: PartialMessage<ValidateTokenResponse>): ValidateTokenResponse {
        const message = { email: "", nickname: "", newSessionToken: "", errorCode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ValidateTokenResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ValidateTokenResponse): ValidateTokenResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string email */ 1:
                    message.email = reader.string();
                    break;
                case /* string nickname */ 2:
                    message.nickname = reader.string();
                    break;
                case /* string new_session_token */ 3:
                    message.newSessionToken = reader.string();
                    break;
                case /* session_service.ValidateTokenErrorCode error_code */ 4:
                    message.errorCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ValidateTokenResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string email = 1; */
        if (message.email !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.email);
        /* string nickname = 2; */
        if (message.nickname !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.nickname);
        /* string new_session_token = 3; */
        if (message.newSessionToken !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.newSessionToken);
        /* session_service.ValidateTokenErrorCode error_code = 4; */
        if (message.errorCode !== 0)
            writer.tag(4, WireType.Varint).int32(message.errorCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session_service.ValidateTokenResponse
 */
export const ValidateTokenResponse = new ValidateTokenResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddBlacklistRequest$Type extends MessageType<AddBlacklistRequest> {
    constructor() {
        super("session_service.AddBlacklistRequest", [
            { no: 1, name: "session_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "refresh_token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "user_before", kind: "message", T: () => UserTimestampPair }
        ]);
    }
    create(value?: PartialMessage<AddBlacklistRequest>): AddBlacklistRequest {
        const message = { sessionToken: "", refreshToken: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddBlacklistRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddBlacklistRequest): AddBlacklistRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string session_token */ 1:
                    message.sessionToken = reader.string();
                    break;
                case /* string refresh_token */ 2:
                    message.refreshToken = reader.string();
                    break;
                case /* session_service.UserTimestampPair user_before */ 3:
                    message.userBefore = UserTimestampPair.internalBinaryRead(reader, reader.uint32(), options, message.userBefore);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddBlacklistRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string session_token = 1; */
        if (message.sessionToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.sessionToken);
        /* string refresh_token = 2; */
        if (message.refreshToken !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.refreshToken);
        /* session_service.UserTimestampPair user_before = 3; */
        if (message.userBefore)
            UserTimestampPair.internalBinaryWrite(message.userBefore, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session_service.AddBlacklistRequest
 */
export const AddBlacklistRequest = new AddBlacklistRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddBlacklistResponse$Type extends MessageType<AddBlacklistResponse> {
    constructor() {
        super("session_service.AddBlacklistResponse", [
            { no: 1, name: "error_code", kind: "enum", T: () => ["session_service.AddBlacklistErrorCode", AddBlacklistErrorCode] }
        ]);
    }
    create(value?: PartialMessage<AddBlacklistResponse>): AddBlacklistResponse {
        const message = { errorCode: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddBlacklistResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddBlacklistResponse): AddBlacklistResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* session_service.AddBlacklistErrorCode error_code */ 1:
                    message.errorCode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddBlacklistResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* session_service.AddBlacklistErrorCode error_code = 1; */
        if (message.errorCode !== 0)
            writer.tag(1, WireType.Varint).int32(message.errorCode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message session_service.AddBlacklistResponse
 */
export const AddBlacklistResponse = new AddBlacklistResponse$Type();
/**
 * @generated ServiceType for protobuf service session_service.SessionService
 */
export const SessionService = new ServiceType("session_service.SessionService", [
    { name: "CreateToken", options: {}, I: CreateTokenRequest, O: CreateTokenResponse },
    { name: "ValidateToken", options: {}, I: ValidateTokenRequest, O: ValidateTokenResponse },
    { name: "AddBlacklist", options: {}, I: AddBlacklistRequest, O: AddBlacklistResponse }
]);
