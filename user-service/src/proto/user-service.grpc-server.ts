// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1
// @generated from protobuf file "user-service.proto" (package "user_service", syntax proto3)
// tslint:disable
import { DeleteUserResponse } from "./user-service";
import { DeleteUserRequest } from "./user-service";
import { EditUserResponse } from "./user-service";
import { EditUserRequest } from "./user-service";
import { CreateUserResponse } from "./user-service";
import { CreateUserRequest } from "./user-service";
import { GetUserResponse } from "./user-service";
import { GetUserRequest } from "./user-service";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service user_service.UserService
 */
export interface IUserService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: GetUser(user_service.GetUserRequest) returns (user_service.GetUserResponse);
     */
    getUser: grpc.handleUnaryCall<GetUserRequest, GetUserResponse>;
    /**
     * @generated from protobuf rpc: CreateUser(user_service.CreateUserRequest) returns (user_service.CreateUserResponse);
     */
    createUser: grpc.handleUnaryCall<CreateUserRequest, CreateUserResponse>;
    /**
     * @generated from protobuf rpc: EditUser(user_service.EditUserRequest) returns (user_service.EditUserResponse);
     */
    editUser: grpc.handleUnaryCall<EditUserRequest, EditUserResponse>;
    /**
     * @generated from protobuf rpc: DeleteUser(user_service.DeleteUserRequest) returns (user_service.DeleteUserResponse);
     */
    deleteUser: grpc.handleUnaryCall<DeleteUserRequest, DeleteUserResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service user_service.UserService.
 *
 * Usage: Implement the interface IUserService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IUserService = ...
 * server.addService(userServiceDefinition, service);
 * ```
 */
export const userServiceDefinition: grpc.ServiceDefinition<IUserService> = {
    getUser: {
        path: "/user_service.UserService/GetUser",
        originalName: "GetUser",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetUserResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetUserRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetUserResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetUserRequest.toBinary(value))
    },
    createUser: {
        path: "/user_service.UserService/CreateUser",
        originalName: "CreateUser",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => CreateUserResponse.fromBinary(bytes),
        requestDeserialize: bytes => CreateUserRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CreateUserResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CreateUserRequest.toBinary(value))
    },
    editUser: {
        path: "/user_service.UserService/EditUser",
        originalName: "EditUser",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => EditUserResponse.fromBinary(bytes),
        requestDeserialize: bytes => EditUserRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(EditUserResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(EditUserRequest.toBinary(value))
    },
    deleteUser: {
        path: "/user_service.UserService/DeleteUser",
        originalName: "DeleteUser",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => DeleteUserResponse.fromBinary(bytes),
        requestDeserialize: bytes => DeleteUserRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(DeleteUserResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(DeleteUserRequest.toBinary(value))
    }
};
