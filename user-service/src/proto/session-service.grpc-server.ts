/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "session-service.proto" (package "session_service", syntax proto3)
// tslint:disable
import { AddBlacklistResponse } from "./session-service";
import { AddBlacklistRequest } from "./session-service";
import { ValidateTokenResponse } from "./session-service";
import { ValidateTokenRequest } from "./session-service";
import { CreateTokenResponse } from "./session-service";
import { CreateTokenRequest } from "./session-service";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service session_service.SessionService
 */
export interface ISessionService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: CreateToken(session_service.CreateTokenRequest) returns (session_service.CreateTokenResponse);
     */
    createToken: grpc.handleUnaryCall<CreateTokenRequest, CreateTokenResponse>;
    /**
     * @generated from protobuf rpc: ValidateToken(session_service.ValidateTokenRequest) returns (session_service.ValidateTokenResponse);
     */
    validateToken: grpc.handleUnaryCall<ValidateTokenRequest, ValidateTokenResponse>;
    /**
     * @generated from protobuf rpc: AddBlacklist(session_service.AddBlacklistRequest) returns (session_service.AddBlacklistResponse);
     */
    addBlacklist: grpc.handleUnaryCall<AddBlacklistRequest, AddBlacklistResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service session_service.SessionService.
 *
 * Usage: Implement the interface ISessionService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: ISessionService = ...
 * server.addService(sessionServiceDefinition, service);
 * ```
 */
export const sessionServiceDefinition: grpc.ServiceDefinition<ISessionService> = {
    createToken: {
        path: "/session_service.SessionService/CreateToken",
        originalName: "CreateToken",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => CreateTokenResponse.fromBinary(bytes),
        requestDeserialize: bytes => CreateTokenRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CreateTokenResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CreateTokenRequest.toBinary(value))
    },
    validateToken: {
        path: "/session_service.SessionService/ValidateToken",
        originalName: "ValidateToken",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ValidateTokenResponse.fromBinary(bytes),
        requestDeserialize: bytes => ValidateTokenRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ValidateTokenResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ValidateTokenRequest.toBinary(value))
    },
    addBlacklist: {
        path: "/session_service.SessionService/AddBlacklist",
        originalName: "AddBlacklist",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => AddBlacklistResponse.fromBinary(bytes),
        requestDeserialize: bytes => AddBlacklistRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(AddBlacklistResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(AddBlacklistRequest.toBinary(value))
    }
};
