/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "collab-service.proto" (package "collaboration_service", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message collaboration_service.CollabTunnelRequest
 */
export interface CollabTunnelRequest {
    /**
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: int32 flags = 2;
     */
    flags: number;
}
/**
 * @generated from protobuf message collaboration_service.CollabTunnelResponse
 */
export interface CollabTunnelResponse {
    /**
     * @generated from protobuf field: bytes data = 1;
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: int32 flags = 2;
     */
    flags: number;
}
/**
 * @generated from protobuf enum collaboration_service.CollabTunnelRequestFlags
 */
export enum CollabTunnelRequestFlags {
    /**
     * @generated from protobuf enum value: COLLAB_REQUEST_FLAG_NONE = 0;
     */
    COLLAB_REQUEST_FLAG_NONE = 0,
    /**
     * @generated from protobuf enum value: COLLAB_REQUEST_FLAG_HEARTBEAT = 1;
     */
    COLLAB_REQUEST_FLAG_HEARTBEAT = 1
}
/**
 * @generated from protobuf enum collaboration_service.CollabTunnelResponseFlags
 */
export enum CollabTunnelResponseFlags {
    /**
     * @generated from protobuf enum value: COLLAB_RESPONSE_FLAG_NONE = 0;
     */
    COLLAB_RESPONSE_FLAG_NONE = 0,
    /**
     * @generated from protobuf enum value: COLLAB_RESPONSE_FLAG_HEARTBEAT = 1;
     */
    COLLAB_RESPONSE_FLAG_HEARTBEAT = 1,
    /**
     * @generated from protobuf enum value: COLLAB_RESPONSE_FLAG_BAD_REQUEST = 2;
     */
    COLLAB_RESPONSE_FLAG_BAD_REQUEST = 2,
    /**
     * @generated from protobuf enum value: COLLAB_RESPONSE_FLAG_UNAUTHORIZED = 4;
     */
    COLLAB_RESPONSE_FLAG_UNAUTHORIZED = 4,
    /**
     * 2 ^ 30
     *
     * @generated from protobuf enum value: COLLAB_RESPONSE_FLAG_INTERNAL_ERROR = 1073741824;
     */
    COLLAB_RESPONSE_FLAG_INTERNAL_ERROR = 1073741824
}
// @generated message type with reflection information, may provide speed optimized methods
class CollabTunnelRequest$Type extends MessageType<CollabTunnelRequest> {
    constructor() {
        super("collaboration_service.CollabTunnelRequest", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "flags", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CollabTunnelRequest>): CollabTunnelRequest {
        const message = { data: new Uint8Array(0), flags: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CollabTunnelRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CollabTunnelRequest): CollabTunnelRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                case /* int32 flags */ 2:
                    message.flags = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CollabTunnelRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        /* int32 flags = 2; */
        if (message.flags !== 0)
            writer.tag(2, WireType.Varint).int32(message.flags);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message collaboration_service.CollabTunnelRequest
 */
export const CollabTunnelRequest = new CollabTunnelRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CollabTunnelResponse$Type extends MessageType<CollabTunnelResponse> {
    constructor() {
        super("collaboration_service.CollabTunnelResponse", [
            { no: 1, name: "data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 2, name: "flags", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CollabTunnelResponse>): CollabTunnelResponse {
        const message = { data: new Uint8Array(0), flags: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CollabTunnelResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CollabTunnelResponse): CollabTunnelResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes data */ 1:
                    message.data = reader.bytes();
                    break;
                case /* int32 flags */ 2:
                    message.flags = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CollabTunnelResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes data = 1; */
        if (message.data.length)
            writer.tag(1, WireType.LengthDelimited).bytes(message.data);
        /* int32 flags = 2; */
        if (message.flags !== 0)
            writer.tag(2, WireType.Varint).int32(message.flags);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message collaboration_service.CollabTunnelResponse
 */
export const CollabTunnelResponse = new CollabTunnelResponse$Type();
/**
 * @generated ServiceType for protobuf service collaboration_service.CollabTunnelService
 */
export const CollabTunnelService = new ServiceType("collaboration_service.CollabTunnelService", [
    { name: "OpenStream", serverStreaming: true, clientStreaming: true, options: {}, I: CollabTunnelRequest, O: CollabTunnelResponse }
]);
