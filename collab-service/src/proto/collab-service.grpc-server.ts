/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "collab-service.proto" (package "collaboration_service", syntax proto3)
// tslint:disable
import { CollabTunnelResponse } from "./collab-service";
import { CollabTunnelRequest } from "./collab-service";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service collaboration_service.CollabTunnelService
 */
export interface ICollabTunnelService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: OpenStream(stream collaboration_service.CollabTunnelRequest) returns (stream collaboration_service.CollabTunnelResponse);
     */
    openStream: grpc.handleBidiStreamingCall<CollabTunnelRequest, CollabTunnelResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service collaboration_service.CollabTunnelService.
 *
 * Usage: Implement the interface ICollabTunnelService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: ICollabTunnelService = ...
 * server.addService(collabTunnelServiceDefinition, service);
 * ```
 */
export const collabTunnelServiceDefinition: grpc.ServiceDefinition<ICollabTunnelService> = {
    openStream: {
        path: "/collaboration_service.CollabTunnelService/OpenStream",
        originalName: "OpenStream",
        requestStream: true,
        responseStream: true,
        responseDeserialize: bytes => CollabTunnelResponse.fromBinary(bytes),
        requestDeserialize: bytes => CollabTunnelRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CollabTunnelResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CollabTunnelRequest.toBinary(value))
    }
};
