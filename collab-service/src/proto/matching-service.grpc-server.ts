/* eslint-disable */
// @generated by protobuf-ts 2.8.0 with parameter server_grpc1,client_grpc1,eslint_disable,long_type_number
// @generated from protobuf file "matching-service.proto" (package "matching_service", syntax proto3)
// tslint:disable
import { CheckQueueStatusResponse } from "./matching-service";
import { CheckQueueStatusRequest } from "./matching-service";
import { JoinQueueResponse } from "./matching-service";
import { JoinQueueRequest } from "./matching-service";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service matching_service.QueueService
 */
export interface IQueueService extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: JoinQueue(matching_service.JoinQueueRequest) returns (matching_service.JoinQueueResponse);
     */
    joinQueue: grpc.handleUnaryCall<JoinQueueRequest, JoinQueueResponse>;
    /**
     * @generated from protobuf rpc: CheckQueueStatus(matching_service.CheckQueueStatusRequest) returns (matching_service.CheckQueueStatusResponse);
     */
    checkQueueStatus: grpc.handleUnaryCall<CheckQueueStatusRequest, CheckQueueStatusResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service matching_service.QueueService.
 *
 * Usage: Implement the interface IQueueService and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IQueueService = ...
 * server.addService(queueServiceDefinition, service);
 * ```
 */
export const queueServiceDefinition: grpc.ServiceDefinition<IQueueService> = {
    joinQueue: {
        path: "/matching_service.QueueService/JoinQueue",
        originalName: "JoinQueue",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => JoinQueueResponse.fromBinary(bytes),
        requestDeserialize: bytes => JoinQueueRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(JoinQueueResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(JoinQueueRequest.toBinary(value))
    },
    checkQueueStatus: {
        path: "/matching_service.QueueService/CheckQueueStatus",
        originalName: "CheckQueueStatus",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => CheckQueueStatusResponse.fromBinary(bytes),
        requestDeserialize: bytes => CheckQueueStatusRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(CheckQueueStatusResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(CheckQueueStatusRequest.toBinary(value))
    }
};
